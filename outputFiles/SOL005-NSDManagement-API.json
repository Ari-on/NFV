{
    "folders": [
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "84874a61-d20f-489a-b668-9cdf7fd31cdf", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "4c9cd6e4-9095-402d-bbad-483587b3adda", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda330", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda340", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda350", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda360", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda370", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda380", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda390", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda400", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda410", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda420", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda430", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda440", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda450", 
                "4c9cd6e4-9095-402d-bbad-483587b3adda460"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "fc323d3e-fa3c-475e-86b8-05445d4c583b", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "088e6ccb-55d2-4e12-be51-21b671986da8", 
                "088e6ccb-55d2-4e12-be51-21b671986da8331", 
                "088e6ccb-55d2-4e12-be51-21b671986da8341", 
                "088e6ccb-55d2-4e12-be51-21b671986da8351", 
                "088e6ccb-55d2-4e12-be51-21b671986da8361", 
                "088e6ccb-55d2-4e12-be51-21b671986da8371", 
                "088e6ccb-55d2-4e12-be51-21b671986da8381", 
                "088e6ccb-55d2-4e12-be51-21b671986da8391", 
                "088e6ccb-55d2-4e12-be51-21b671986da8401", 
                "088e6ccb-55d2-4e12-be51-21b671986da8411", 
                "088e6ccb-55d2-4e12-be51-21b671986da8421", 
                "088e6ccb-55d2-4e12-be51-21b671986da8431", 
                "088e6ccb-55d2-4e12-be51-21b671986da8441", 
                "088e6ccb-55d2-4e12-be51-21b671986da8451", 
                "088e6ccb-55d2-4e12-be51-21b671986da8461"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "0db8f2a0-c307-4a03-86fb-613983827ad8", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0332", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0342", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0352", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0362", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0372", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0382", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0392", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0402", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0412", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0422", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0432", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0442", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0452", 
                "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0462"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification"
        }, 
        {
            "description": "Folder for pnf_descriptors", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "8a64ac7a-6f01-48c9-a186-46093a3229c3", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "0f21e388-e232-4489-a8da-fc0a3782c168", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891", 
                "87a6fa3e-6efa-4774-8f33-654905651681", 
                "8f318541-c012-4a30-a6a4-7d557902163e", 
                "242281b0-18ee-4f26-800d-aca5c5650c49", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162", 
                "0f21e388-e232-4489-a8da-fc0a3782c1680", 
                "87a6fa3e-6efa-4774-8f33-6549056516814", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b515", 
                "0f21e388-e232-4489-a8da-fc0a3782c16822", 
                "87a6fa3e-6efa-4774-8f33-65490565168126", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b27", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b537", 
                "0f21e388-e232-4489-a8da-fc0a3782c16844", 
                "87a6fa3e-6efa-4774-8f33-65490565168148", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b49", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b559", 
                "0f21e388-e232-4489-a8da-fc0a3782c16866", 
                "87a6fa3e-6efa-4774-8f33-65490565168170", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b71", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b581", 
                "0f21e388-e232-4489-a8da-fc0a3782c16888", 
                "87a6fa3e-6efa-4774-8f33-65490565168192", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b93", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5103", 
                "0f21e388-e232-4489-a8da-fc0a3782c168110", 
                "87a6fa3e-6efa-4774-8f33-654905651681114", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b115", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5125", 
                "0f21e388-e232-4489-a8da-fc0a3782c168132", 
                "87a6fa3e-6efa-4774-8f33-654905651681136", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b137", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5147", 
                "0f21e388-e232-4489-a8da-fc0a3782c168154", 
                "87a6fa3e-6efa-4774-8f33-654905651681158", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b159", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5169", 
                "0f21e388-e232-4489-a8da-fc0a3782c168176", 
                "87a6fa3e-6efa-4774-8f33-654905651681180", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b181", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5191", 
                "0f21e388-e232-4489-a8da-fc0a3782c168198", 
                "87a6fa3e-6efa-4774-8f33-654905651681202", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b203", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5213", 
                "0f21e388-e232-4489-a8da-fc0a3782c168220", 
                "87a6fa3e-6efa-4774-8f33-654905651681224", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b225", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5235", 
                "0f21e388-e232-4489-a8da-fc0a3782c168242", 
                "87a6fa3e-6efa-4774-8f33-654905651681246", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b247", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5257", 
                "0f21e388-e232-4489-a8da-fc0a3782c168264", 
                "87a6fa3e-6efa-4774-8f33-654905651681268", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b269", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5279", 
                "0f21e388-e232-4489-a8da-fc0a3782c168286", 
                "87a6fa3e-6efa-4774-8f33-654905651681290", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b291", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5301", 
                "0f21e388-e232-4489-a8da-fc0a3782c168308", 
                "87a6fa3e-6efa-4774-8f33-654905651681312", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b313", 
                "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5323", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162338", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162348", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162358", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162368", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162378", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162388", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162398", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162408", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162418", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162428", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162438", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162448", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162458", 
                "381fe787-679c-4b2e-9b6f-dd20b3f65162468", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891470", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891472", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891474", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891476", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891478", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891480", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891482", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891484", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891486", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891488", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891490", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891492", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891494", 
                "e5d988ba-8a87-4468-a03b-06bc3b64b891496", 
                "242281b0-18ee-4f26-800d-aca5c5650c49498", 
                "242281b0-18ee-4f26-800d-aca5c5650c49501", 
                "242281b0-18ee-4f26-800d-aca5c5650c49504", 
                "242281b0-18ee-4f26-800d-aca5c5650c49507", 
                "242281b0-18ee-4f26-800d-aca5c5650c49510", 
                "242281b0-18ee-4f26-800d-aca5c5650c49513", 
                "242281b0-18ee-4f26-800d-aca5c5650c49516", 
                "242281b0-18ee-4f26-800d-aca5c5650c49519", 
                "242281b0-18ee-4f26-800d-aca5c5650c49522", 
                "242281b0-18ee-4f26-800d-aca5c5650c49525", 
                "242281b0-18ee-4f26-800d-aca5c5650c49528", 
                "242281b0-18ee-4f26-800d-aca5c5650c49531", 
                "242281b0-18ee-4f26-800d-aca5c5650c49534", 
                "8f318541-c012-4a30-a6a4-7d557902163e537", 
                "8f318541-c012-4a30-a6a4-7d557902163e539", 
                "8f318541-c012-4a30-a6a4-7d557902163e541", 
                "8f318541-c012-4a30-a6a4-7d557902163e543", 
                "8f318541-c012-4a30-a6a4-7d557902163e545", 
                "8f318541-c012-4a30-a6a4-7d557902163e547", 
                "8f318541-c012-4a30-a6a4-7d557902163e549", 
                "8f318541-c012-4a30-a6a4-7d557902163e551", 
                "8f318541-c012-4a30-a6a4-7d557902163e553", 
                "8f318541-c012-4a30-a6a4-7d557902163e555", 
                "8f318541-c012-4a30-a6a4-7d557902163e557", 
                "8f318541-c012-4a30-a6a4-7d557902163e559", 
                "8f318541-c012-4a30-a6a4-7d557902163e561"
            ], 
            "name": "pnf_descriptors"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "82717134-4016-4481-a5ee-a8fed49a2997", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "89c20472-170a-4fda-856a-41fca00b70c7", 
                "89c20472-170a-4fda-856a-41fca00b70c7333", 
                "89c20472-170a-4fda-856a-41fca00b70c7343", 
                "89c20472-170a-4fda-856a-41fca00b70c7353", 
                "89c20472-170a-4fda-856a-41fca00b70c7363", 
                "89c20472-170a-4fda-856a-41fca00b70c7373", 
                "89c20472-170a-4fda-856a-41fca00b70c7383", 
                "89c20472-170a-4fda-856a-41fca00b70c7393", 
                "89c20472-170a-4fda-856a-41fca00b70c7403", 
                "89c20472-170a-4fda-856a-41fca00b70c7413", 
                "89c20472-170a-4fda-856a-41fca00b70c7423", 
                "89c20472-170a-4fda-856a-41fca00b70c7433", 
                "89c20472-170a-4fda-856a-41fca00b70c7443", 
                "89c20472-170a-4fda-856a-41fca00b70c7453", 
                "89c20472-170a-4fda-856a-41fca00b70c7463"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification"
        }, 
        {
            "description": "Folder for ns_descriptors", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "ec5503b4-405c-44d7-81d1-e72353020849", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225", 
                "635f4952-83f8-4736-b7d3-21278a07bfab", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8", 
                "86f6818d-2088-4277-9bac-32eb20167b7c", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d02251", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d87", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c8", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d022523", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d829", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c30", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d022545", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d851", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c52", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d022567", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d873", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c74", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d022589", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d895", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c96", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225111", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8117", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c118", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225133", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8139", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c140", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225155", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8161", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c162", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225177", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8183", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c184", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225199", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8205", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c206", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225221", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8227", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c228", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225243", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8249", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c250", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225265", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8271", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c272", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225287", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8293", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c294", 
                "1fcd0c7e-08fc-45f1-8807-48b0239d0225309", 
                "7d195aa5-4ab6-4b03-bc2d-6814895458d8315", 
                "b54df95e-f7cd-455c-b6b0-3aaba16ea92c316", 
                "86f6818d-2088-4277-9bac-32eb20167b7c339", 
                "86f6818d-2088-4277-9bac-32eb20167b7c349", 
                "86f6818d-2088-4277-9bac-32eb20167b7c359", 
                "86f6818d-2088-4277-9bac-32eb20167b7c369", 
                "86f6818d-2088-4277-9bac-32eb20167b7c379", 
                "86f6818d-2088-4277-9bac-32eb20167b7c389", 
                "86f6818d-2088-4277-9bac-32eb20167b7c399", 
                "86f6818d-2088-4277-9bac-32eb20167b7c409", 
                "86f6818d-2088-4277-9bac-32eb20167b7c419", 
                "86f6818d-2088-4277-9bac-32eb20167b7c429", 
                "86f6818d-2088-4277-9bac-32eb20167b7c439", 
                "86f6818d-2088-4277-9bac-32eb20167b7c449", 
                "86f6818d-2088-4277-9bac-32eb20167b7c459", 
                "86f6818d-2088-4277-9bac-32eb20167b7c469", 
                "635f4952-83f8-4736-b7d3-21278a07bfab471", 
                "635f4952-83f8-4736-b7d3-21278a07bfab473", 
                "635f4952-83f8-4736-b7d3-21278a07bfab475", 
                "635f4952-83f8-4736-b7d3-21278a07bfab477", 
                "635f4952-83f8-4736-b7d3-21278a07bfab479", 
                "635f4952-83f8-4736-b7d3-21278a07bfab481", 
                "635f4952-83f8-4736-b7d3-21278a07bfab483", 
                "635f4952-83f8-4736-b7d3-21278a07bfab485", 
                "635f4952-83f8-4736-b7d3-21278a07bfab487", 
                "635f4952-83f8-4736-b7d3-21278a07bfab489", 
                "635f4952-83f8-4736-b7d3-21278a07bfab491", 
                "635f4952-83f8-4736-b7d3-21278a07bfab493", 
                "635f4952-83f8-4736-b7d3-21278a07bfab495", 
                "635f4952-83f8-4736-b7d3-21278a07bfab497", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3500", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3503", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3506", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3509", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3512", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3515", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3518", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3521", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3524", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3527", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3530", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3533", 
                "9e3b1e38-1736-4c5d-bb60-96c128e1afa3536", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205538", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205540", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205542", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205544", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205546", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205548", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205550", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205552", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205554", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205556", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205558", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205560", 
                "296e3de0-c633-45c4-86cf-fcd2a9725205562"
            ], 
            "name": "ns_descriptors"
        }, 
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "39e5d940-04f5-402c-824d-d0e8a9ad6a91", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "bd57fbcd-3541-47a2-8f5e-75d43386d618", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d6182", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a6", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d61824", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a28", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d61846", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a50", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d61868", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a72", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d61890", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a94", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618112", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a116", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618134", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a138", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618156", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a160", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618178", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a182", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618200", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a204", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618222", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a226", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618244", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a248", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618266", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a270", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618288", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a292", 
                "bd57fbcd-3541-47a2-8f5e-75d43386d618310", 
                "5da43406-22de-4e7c-a51c-0a79bc85818a314", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096334", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096344", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096354", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096364", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096374", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096384", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096394", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096404", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096414", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096424", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096434", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096444", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096454", 
                "f8163a42-18b8-4c5f-bab2-b252d7797096464", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909499", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909502", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909505", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909508", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909511", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909514", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909517", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909520", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909523", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909526", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909529", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909532", 
                "73fc7cca-2658-4053-aa88-d8053bb3b909535"
            ], 
            "name": "subscriptions"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "fa165010-2526-4a16-8ea8-0bc4658e3a0e", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a923", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a9225", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a9247", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a9269", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a9291", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92113", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92135", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92157", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92179", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92201", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92223", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92245", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92267", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92289", 
                "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92311", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5335", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5345", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5355", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5365", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5375", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5385", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5395", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5405", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5415", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5425", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5435", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5445", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5455", 
                "5259c37b-2182-4967-9307-0b7f58cd0af5465"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "2b47bada-729a-40aa-a15a-a15a57f4a86b", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "b7013f42-b036-4699-b339-ada2706da614", 
                "b7013f42-b036-4699-b339-ada2706da614336", 
                "b7013f42-b036-4699-b339-ada2706da614346", 
                "b7013f42-b036-4699-b339-ada2706da614356", 
                "b7013f42-b036-4699-b339-ada2706da614366", 
                "b7013f42-b036-4699-b339-ada2706da614376", 
                "b7013f42-b036-4699-b339-ada2706da614386", 
                "b7013f42-b036-4699-b339-ada2706da614396", 
                "b7013f42-b036-4699-b339-ada2706da614406", 
                "b7013f42-b036-4699-b339-ada2706da614416", 
                "b7013f42-b036-4699-b339-ada2706da614426", 
                "b7013f42-b036-4699-b339-ada2706da614436", 
                "b7013f42-b036-4699-b339-ada2706da614446", 
                "b7013f42-b036-4699-b339-ada2706da614456", 
                "b7013f42-b036-4699-b339-ada2706da614466"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "collection_name": "SOL005 - NSD Management Interface", 
            "collection": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "id": "20c44c45-c5b9-4435-b91a-f1b6bf4bd3f4", 
            "collection_id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "order": [
                "3cf1e833-66bf-43c5-974e-02d5f79e4069", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069337", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069347", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069357", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069367", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069377", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069387", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069397", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069407", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069417", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069427", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069437", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069447", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069457", 
                "3cf1e833-66bf-43c5-974e-02d5f79e4069467"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification"
        }
    ], 
    "description": "SOL005 - NSD Management Interface  IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NSD and PNFD changes"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NSD and PNFD changes"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NSD and PNFD changes"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/4?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Fetch the content of a PNFD."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Upload the content of a PNFD."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NSD and PNFD changes"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/7?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Fetch the content of a NSD."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/8?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Upload the content of a NSD."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple subscriptions."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Subscribe to NSD and PNFD change notifications."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/11?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Test the notification endpoint"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NSD and PNFD changes"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n", 
            "id": "b7013f42-b036-4699-b339-ada2706da614", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NSD and PNFD changes"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual PNFD resource."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Modify the user defined data of an individual PNF descriptor resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/16?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49", 
            "name": "Delete an individual PNF descriptor resource."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NSD and PNFD changes"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple PNF descriptor resources."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "description": "The POST method is used to create a new PNF descriptor resource\n", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Create a new PNF descriptor resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual subscription resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909", 
            "name": "Terminate Subscription"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple NS descriptor resources."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Create a new NS descriptor resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read information about an individual NS descriptor resource."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Modify the operational state and/or the user defined data of an individual NS descriptor resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3", 
            "name": "Delete an individual NS descriptor resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple subscriptions."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple PNF descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple PNF descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple PNF descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple PNF descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple PNF descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple PNF descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple NS descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple NS descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple NS descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple NS descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple NS descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query information about multiple NS descriptor resources."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c1680", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d02251", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6182", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a923", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-6549056516814", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a6", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d87", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c8", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d61809", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b010", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b111", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b212", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b313", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b414", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b515", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8016", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8117", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/57?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8218", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/58?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8319", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8420", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8521", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c16822", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d022523", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d61824", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a9225", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "87a6fa3e-6efa-4774-8f33-65490565168126", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b27", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/67?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a28", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/68?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d829", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/69?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c30", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/70?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618031", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/71?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b032", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/72?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b133", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/73?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b234", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/74?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b335", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/75?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b436", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/76?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b537", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/77?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8038", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/78?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8139", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/79?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8240", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/80?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8341", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/81?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8442", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/82?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8543", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/83?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c16844", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/84?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d022545", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/85?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d61846", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/86?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a9247", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/87?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-65490565168148", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/88?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b49", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/89?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a50", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/90?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d851", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/91?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c52", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/92?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618053", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/93?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b054", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/94?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b155", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/95?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b256", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/96?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b357", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/97?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b458", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/98?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b559", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/99?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8060", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/100?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8161", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/101?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8262", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/102?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8363", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/103?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8464", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/104?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8565", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/105?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c16866", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/106?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d022567", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/107?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d61868", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/108?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a9269", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/109?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-65490565168170", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/110?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b71", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/111?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a72", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/112?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d873", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/113?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c74", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/114?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618075", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/115?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b076", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/116?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b177", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/117?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b278", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/118?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b379", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/119?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b480", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/120?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b581", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/121?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8082", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/122?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8183", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/123?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8284", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/124?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8385", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/125?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8486", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/126?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8587", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/127?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c16888", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/128?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d022589", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/129?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d61890", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/130?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a9291", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/131?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-65490565168192", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/132?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b93", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/133?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a94", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/134?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d895", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/135?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c96", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/136?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618097", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/137?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b098", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/138?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b199", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/139?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2100", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/140?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3101", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/141?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4102", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/142?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5103", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/143?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80104", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/144?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81105", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/145?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82106", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/146?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83107", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/147?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84108", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/148?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85109", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/149?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168110", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/150?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225111", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/151?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618112", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/152?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92113", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/153?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681114", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/154?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b115", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/155?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a116", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/156?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8117", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/157?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c118", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/158?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180119", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/159?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0120", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/160?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1121", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/161?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2122", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/162?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3123", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/163?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4124", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/164?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5125", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/165?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80126", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/166?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81127", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/167?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82128", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/168?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83129", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/169?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84130", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/170?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85131", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/171?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168132", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/172?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225133", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/173?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618134", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/174?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92135", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/175?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681136", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/176?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b137", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/177?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a138", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/178?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8139", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/179?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c140", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/180?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180141", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/181?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0142", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/182?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1143", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/183?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2144", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/184?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3145", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/185?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4146", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/186?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5147", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/187?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80148", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/188?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81149", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/189?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82150", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/190?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83151", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/191?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84152", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/192?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85153", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/193?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168154", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/194?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225155", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/195?query=/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptionssnoitpircsbus?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618156", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/196?query=/nsd/v1/subscriptionssnoitpircsbus?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotificationnoitacifitoNnoiteleDdfnP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92157", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/197?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotificationnoitacifitoNnoiteleDdfnP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681158", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/198?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b159", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/199?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a160", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/200?query=/nsd/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8161", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/201?query=/nsd/v1/ns_descriptorssrotpircsed_sn?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c162", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/202?query=/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptionssnoitpircsbus", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180163", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/203?query=/nsd/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0164", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/204?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1165", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/205?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2166", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/206?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3167", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/207?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4168", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/208?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5169", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/209?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80170", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/210?query=/nsd/v1/ns_descriptorssrotpircsed_sn?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81171", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/211?query=/nsd/v1/ns_descriptorssrotpircsed_sn?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82172", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/212?query=/nsd/v1/ns_descriptorssrotpircsed_sn?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83173", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/213?query=/nsd/v1/ns_descriptorssrotpircsed_sn?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84174", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/214?query=/nsd/v1/ns_descriptorssrotpircsed_sn?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85175", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/215?query=/nsd/v1/ns_descriptorssrotpircsed_sn',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168176", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/216?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225177", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/217?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618178", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/218?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92179", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/219?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681180", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/220?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b181", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/221?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a182", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/222?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8183", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/223?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c184", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/224?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180185", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/225?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0186", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/226?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1187", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/227?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2188", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/228?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3189", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/229?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4190", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/230?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5191", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/231?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80192", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/232?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81193", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/233?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82194", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/234?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83195", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/235?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84196", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/236?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85197", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/237?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168198", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/238?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225199", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/239?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618200", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/240?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92201", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/241?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681202", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/242?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b203", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/243?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a204", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/244?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8205", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/245?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c206", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/246?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180207", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/247?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0208", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/248?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1209", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/249?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2210", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/250?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3211", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/251?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4212", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/252?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5213", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/253?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80214", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/254?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81215", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/255?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82216", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/256?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83217", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/257?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84218", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/258?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85219", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/259?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168220", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/260?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225221", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/261?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618222", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/262?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92223", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/263?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681224", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/264?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b225", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/265?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a226", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/266?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8227", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/267?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c228", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/268?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180229", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/269?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0230", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/270?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1231", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/271?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2232", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/272?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3233", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/273?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4234", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/274?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5235", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/275?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80236", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/276?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81237", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/277?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82238", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/278?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83239", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/279?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84240", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/280?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85241", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/281?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_contents", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168242", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/282?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_contents',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_contents", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225243", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/283?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_contents',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filters={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618244", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/284?query=/nsd/v1/subscriptions?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotifications", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92245", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/285?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoIds", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681246", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/286?query=/nsd/v1/pnf_descriptors/:pnfdInfoIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filters={{filter}}&all_fieldss={{all_fields}}&fieldss={{fields}}&exclude_fieldss={{exclude_fields}}&exclude_defaults={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b247", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/287?query=/nsd/v1/pnf_descriptors?filters={{filter}}?all_fieldss={{all_fields}}?fieldss={{fields}}?exclude_fieldss={{exclude_fields}}?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionIds", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a248", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/288?query=/nsd/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filters={{filter}}&all_fieldss={{all_fields}}&fieldss={{fields}}&exclude_fieldss={{exclude_fields}}&exclude_defaults={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8249", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/289?query=/nsd/v1/ns_descriptors?filters={{filter}}?all_fieldss={{all_fields}}?fieldss={{fields}}?exclude_fieldss={{exclude_fields}}?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoIds", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c250", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/290?query=/nsd/v1/ns_descriptors/:nsdInfoIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptionss", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180251", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/291?query=/nsd/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filters={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0252", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/292?query=/nsd/v1/pnf_descriptors?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fieldss={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1253", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/293?query=/nsd/v1/pnf_descriptors?all_fieldss={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fieldss={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2254", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/294?query=/nsd/v1/pnf_descriptors?fieldss={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fieldss={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3255", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/295?query=/nsd/v1/pnf_descriptors?exclude_fieldss={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_defaults={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4256", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/296?query=/nsd/v1/pnf_descriptors?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorss", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5257", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/297?query=/nsd/v1/pnf_descriptorss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filters={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80258", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/298?query=/nsd/v1/ns_descriptors?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fieldss={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81259", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/299?query=/nsd/v1/ns_descriptors?all_fieldss={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fieldss={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82260", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/300?query=/nsd/v1/ns_descriptors?fieldss={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fieldss={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83261", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/301?query=/nsd/v1/ns_descriptors?exclude_fieldss={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_defaults={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84262", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/302?query=/nsd/v1/ns_descriptors?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorss", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85263", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/303?query=/nsd/v1/ns_descriptorss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168264", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/304?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225265", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/305?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618266", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/306?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92267", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/307?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681268", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/308?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b269", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/309?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a270", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/310?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8271", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/311?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c272", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/312?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180273", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/313?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0274", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/314?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1275", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/315?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2276", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/316?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3277", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/317?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4278", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/318?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5279", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/319?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80280", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/320?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81281", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/321?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82282", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/322?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83283", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/323?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84284", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/324?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85285", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/325?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168286", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/326?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225287", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/327?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618288", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/328?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92289", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/329?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681290", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/330?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b291", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/331?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a292", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/332?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8293", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/333?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c294", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/334?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180295", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/335?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0296", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/336?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1297", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/337?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2298", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/338?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3299", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/339?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4300", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/340?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5301", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/341?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80302", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/342?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81303", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/343?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82304", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/344?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83305", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/345?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84306", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/346?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85307", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/347?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "0f21e388-e232-4489-a8da-fc0a3782c168308", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/348?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the PNFD. This method shall follow the provisions specified in the  Table 5.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "1fcd0c7e-08fc-45f1-8807-48b0239d0225309", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/349?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of the NSD. The NSD can be implemented as a single file or as a collection of multiple files.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the NSD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request:• If the \"Accept\" header contains only \"text/plain\" and the NSD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned.• If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the NSD shall be returned embedded in a ZIP file.• If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file NSD; for a multi-file NSD, a ZIP file shall be returned.NOTE: The structure of the NSD zip file is outside the scope of the present document.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions?filter={{filter}}", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d618310", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/350?query=/nsd/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "ca8f17d9-cef2-4e47-a974-ea24cc0d9a92311", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/351?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe GET method allows the server to test the notification endpoint  that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Table 5.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "87a6fa3e-6efa-4774-8f33-654905651681312", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/352?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads information about an individual PNF descriptor. This method shall follow the provisions specified in the Tables 5.4.6.3.2-1 and 5.4.6.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b313", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/353?query=/nsd/v1/pnf_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "id": "5da43406-22de-4e7c-a51c-0a79bc85818a314", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/354?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe GET method retrieves information about a subscription by reading an individual subscription resource.  This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d8315", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/355?query=/nsd/v1/ns_descriptors?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "b54df95e-f7cd-455c-b6b0-3aaba16ea92c316", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/356?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method reads information about an individual NS descriptor. This method shall follow the provisions specified in GS NFV-SOL 005 Tables 5.4.3.3.2-1 and 5.4.3.3.2-2 of GS NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "bd57fbcd-3541-47a2-8f5e-75d43386d6180317", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/357?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall support the URI query parameters, request and response data structures, and response codes.\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?filter={{filter}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b0318", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/358?query=/nsd/v1/pnf_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?all_fields={{all_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b1319", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/359?query=/nsd/v1/pnf_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?fields={{fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b2320", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/360?query=/nsd/v1/pnf_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b3321", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/361?query=/nsd/v1/pnf_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b4322", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/362?query=/nsd/v1/pnf_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "7a3d16ac-e2c1-4301-ab1e-a8d4ff64574b5323", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/363?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple PNF descriptor resources.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?filter={{filter}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d80324", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/364?query=/nsd/v1/ns_descriptors?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?all_fields={{all_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d81325", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/365?query=/nsd/v1/ns_descriptors?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?fields={{fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d82326", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/366?query=/nsd/v1/ns_descriptors?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d83327", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/367?query=/nsd/v1/ns_descriptors?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d84328", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/368?query=/nsd/v1/ns_descriptors?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "7d195aa5-4ab6-4b03-bc2d-6814895458d85329", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/369?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The GET method queries information about multiple NS descriptor resources. This method shall follow the provisions specified in the  Tables 5.4.2.3.2-1 and 5.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda330", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8331", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0332", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7333", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096334", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5335", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614336", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069337", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162338", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c339", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda340", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8341", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0342", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7343", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096344", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5345", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614346", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069347", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162348", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c349", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda350", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8351", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0352", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7353", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096354", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5355", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614356", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069357", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162358", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c359", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda360", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8361", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0362", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7363", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096364", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5365", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614366", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069367", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162368", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c369", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda370", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8371", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0372", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7373", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096374", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5375", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614376", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069377", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162378", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c379", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda380", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8381", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0382", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7383", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096384", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5385", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614386", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069387", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162388", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c389", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotificationnoitacifitoNeruliaFgnidraoBnOdsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda390", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotificationnoitacifitoNeruliaFgnidraoBnOdsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotificationnoitacifitoNgnidraoBnOdfnP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8391", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotificationnoitacifitoNgnidraoBnOdfnP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotificationnoitacifitoNgnidraoBnOdsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0392", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotificationnoitacifitoNgnidraoBnOdsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotificationnoitacifitoNnoiteleDdsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7393", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotificationnoitacifitoNnoiteleDdsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptionssnoitpircsbus", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096394", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotificationnoitacifitoNnoiteleDdfnP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5395", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotificationnoitacifitoNnoiteleDdfnP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotificationnoitacifitoNegnahCdsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "b7013f42-b036-4699-b339-ada2706da614396", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotificationnoitacifitoNegnahCdsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotificationnoitacifitoNeruliaFgnidraoBnOdfnP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069397", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotificationnoitacifitoNeruliaFgnidraoBnOdfnP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162398", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c399", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptorssrotpircsed_sn',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda400", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8401", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0402", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7403", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096404", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5405", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614406", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069407", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162408", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c409", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda410", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8411", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0412", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7413", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096414", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5415", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614416", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069417", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162418", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c419", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda420", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8421", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0422", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7423", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096424", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5425", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614426", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069427", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162428", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c429", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotifications", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda430", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotifications", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8431", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotifications", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0432", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotifications", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7433", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptionss", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096434", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotifications", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5435", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotifications", 
            "id": "b7013f42-b036-4699-b339-ada2706da614436", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotifications", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069437", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorss", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162438", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptorss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorss", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c439", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptorss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda440", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8441", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0442", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7443", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096444", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5445", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614446", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069447", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162448", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c449", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda450", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8451", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0452", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7453", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096454", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5455", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614456", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069457", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162458", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c459", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification", 
            "id": "4c9cd6e4-9095-402d-bbad-483587b3adda460", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingFailureNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.900z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055892, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification", 
            "id": "088e6ccb-55d2-4e12-be51-21b671986da8461", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification", 
            "id": "86d6f2ce-a4a3-428d-8d51-9631a3c66cd0462", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdOnBoardingNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdOnBoardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification", 
            "id": "89c20472-170a-4fda-856a-41fca00b70c7463", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdDeletionNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t07:54:15.901z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "id": "f8163a42-18b8-4c5f-bab2-b252d7797096464", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsdInfoId\": [\n                \"nsdinfoid\"\n            ],\n            \"pnfdProvider\": [\n                \"pnfdprovider\"\n            ],\n            \"nsdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdId\": [\n                \"nsdid\"\n            ],\n            \"pnfdVersion\": [\n                \"pnfdversion\"\n            ],\n            \"pnfdOnboardingState\": [\n                \"created\"\n            ],\n            \"nsdUsageState\": [\n                \"in_use\"\n            ],\n            \"nsdOperationalState\": [\n                \"enabled\"\n            ],\n            \"nsdInvariantId\": [\n                \"nsdinvariantid\"\n            ],\n            \"nestedNsdInfoIds\": [\n                \"nestednsdinfoids\"\n            ],\n            \"vnfPkgIds\": [\n                \"vnfpkgids\"\n            ],\n            \"pnfdInfoIds\": [\n                \"pnfdinfoids\"\n            ],\n            \"nsdDesigner\": [\n                \"nsddesigner\"\n            ],\n            \"pnfdInvariantId\": [\n                \"pnfdinvariantid\"\n            ],\n            \"notificationTypes\": [\n                \"nsdonboardingnotification\"\n            ],\n            \"pnfdUsageState\": [\n                \"in_use\"\n            ],\n            \"pnfdId\": [\n                \"pnfdid\"\n            ],\n            \"pnfdName\": [\n                \"pnfdname\"\n            ],\n            \"nsdName\": [\n                \"nsdname\"\n            ],\n            \"nsdVersion\": [\n                \"nsdversion\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": \"basic\",\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription.  This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 5.4.8.3.1-1 and 5.4.8.3.1-2 of GS-NFV SOL 005. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\nThis resource represents subscriptions.  The client can use this resource to subscribe to notifications related to NSD management and to query its subscriptions.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification", 
            "id": "5259c37b-2182-4967-9307-0b7f58cd0af5465", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdDeletionNotification\": {\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification", 
            "id": "b7013f42-b036-4699-b339-ada2706da614466", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdChangeNotification\": {\n        \"nsdInfoId\": \"nsdinfoid\",\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"nsdId\": \"nsdid\",\n        \"notificationType\": \"notificationtype\",\n        \"_links\": {\n            \"nsdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsdOperationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsdChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification", 
            "id": "3cf1e833-66bf-43c5-974e-02d5f79e4069467", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdOnBoardingFailureNotification\": {\n        \"timeStamp\": \"2019-06-27t07:54:15.902z\",\n        \"notificationType\": \"notificationtype\",\n        \"pnfdInfoId\": \"pnfdinfoid\",\n        \"_links\": {\n            \"pnfdInfo\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"pnfdId\": \"pnfdid\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"id\": \"id\",\n        \"onboardingFailureDetails\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        }\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PnfdOnBoardingFailureNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "This resource represents a notification endpoint. The server can use  this resource to send notifications to a subscribed client, which has provided the URI of this resource during the subscription process.\nThe POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.10.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "381fe787-679c-4b2e-9b6f-dd20b3f65162468", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePnfdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055896, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new PNF descriptor resource\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "86f6818d-2088-4277-9bac-32eb20167b7c469", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsdInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method is used to create a new NS descriptor resource or a new version of an on-boarded NS descriptor.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891470", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/510?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab471", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/511?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891472", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/512?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab473", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/513?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891474", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/514?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab475", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/515?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891476", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/516?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab477", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/517?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891478", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/518?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab479", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/519?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891480", 
            "method": "PUT", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/520?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab481", 
            "method": "PUT", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/521?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891482", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/522?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab483", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/523?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891484", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/524?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab485", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/525?query=/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891486", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/526?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab487", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/527?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891488", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/528?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab489", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/529?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891490", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/530?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab491", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/531?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_contents", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891492", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/532?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_contents',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_contents", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab493", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/533?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_contents',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891494", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/534?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab495", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/535?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content", 
            "id": "e5d988ba-8a87-4468-a03b-06bc3b64b891496", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055893, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/536?query=/nsd/v1/pnf_descriptors/:pnfdInfoId/pnfd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method is used to upload the content of a PNFD. This resource represents the content of the individual PNF descriptor, i.e. PNFD content.  The client can use this resource to upload and download the content of the PNFD.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content", 
            "id": "635f4952-83f8-4736-b7d3-21278a07bfab497", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055894, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/537?query=/nsd/v1/ns_descriptors/:nsdInfoId/nsd_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PUT method is used to upload the content of a NSD. The NSD to be uploaded can be implemented as a single file or as a collection of multiple files, as defined in clause 5.4.4.3.2 of GS NFV-SOL 005.  If the NSD is implemented in the form of multiple files, a ZIP file embedding these files shall be uploaded.  If the NSD is implemented as a single file, either that file or a ZIP file  embedding that file shall be uploaded. The \"Content-Type\" HTTP header in the PUT request shall be set accordingly based on the format selection of the NSD.  If the NSD to be uploaded is a text file, the \"Content-Type\" header is set to \"text/plain\".  If the NSD to be uploaded is a zip file, the \"Content-Type\" header is set to \"application/zip\".  This method shall follow the provisions specified in the Tables 5.4.4.3.3-1 and 5.4.4.3.3-2 of GS-NFV-SOL 005 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/538?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49498", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/539?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909499", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/540?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/541?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49501", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/542?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909502", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/543?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/544?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49504", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/545?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909505", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/546?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3506", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/547?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49507", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/548?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909508", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/549?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3509", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/550?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49510", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/551?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909511", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/552?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3512", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/553?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49513", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/554?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909514", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/555?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3515", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/556?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49516", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/557?query=/nsd/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909517", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/558?query=/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3518", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/559?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49519", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/560?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909520", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/561?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3521", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/562?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49522", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/563?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909523", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/564?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3524", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/565?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49525", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/566?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909526", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/567?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3527", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/568?query=/nsd/v1/pnf_descriptors/:pnfdInfoIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49528", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/569?query=/nsd/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909529", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/570?query=/nsd/v1/ns_descriptors/:nsdInfoIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3530", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/571?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49531", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/572?query=/nsd/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909532", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/573?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3533", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/574?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "242281b0-18ee-4f26-800d-aca5c5650c49534", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual PNF descriptor resource. An individual PNF descriptor resource can only be deleted when there is no NS instance using it or there is NSD referencing it. To delete all PNFD versions identified by a particular value of the \"pnfdInvariantId\" attribute, the procedure is to first use the GET method with filter \"pnfdInvariantId\" towards the PNF descriptors resource to find all versions of the PNFD. Then, the client uses the DELETE method described in this clause to delete each PNFD version individually.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/575?query=/nsd/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "73fc7cca-2658-4053-aa88-d8053bb3b909535", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055897, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This resource represents an individual subscription.  It can be used by the client to read and to terminate a subscription to notifications related to NSD management.\nThe DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Table 5.4.9.3.3-2.      \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/576?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "9e3b1e38-1736-4c5d-bb60-96c128e1afa3536", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual NS descriptor resource. An individual NS descriptor resource can only be deleted when there is no NS instance using it (i.e. usageState = NOT_IN_USE) and has been disabled already (i.e. operationalState = DISABLED). Otherwise, the DELETE method shall fail.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e537", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/577?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205538", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/578?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e539", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/579?query=/nsd/v1/pnf_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205540", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/580?query=/nsd/v1/ns_descriptors',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e541", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/581?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205542", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/582?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e543", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/583?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205544", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/584?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e545", 
            "method": "PATCH", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/585?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205546", 
            "method": "PATCH", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/586?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e547", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/587?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205548", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/588?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e549", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/589?query=/nsd/v1/pnf_descriptorssrotpircsed_fnp/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205550", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/590?query=/nsd/v1/ns_descriptorssrotpircsed_sn/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e551", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/591?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205552", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/592?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e553", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/593?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205554", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/594?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e555", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/595?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205556", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/596?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoIds", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e557", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/597?query=/nsd/v1/pnf_descriptors/:pnfdInfoIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoIds", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205558", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/598?query=/nsd/v1/ns_descriptors/:nsdInfoIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e559", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/599?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205560", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/600?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/pnf_descriptors/:pnfdInfoId", 
            "id": "8f318541-c012-4a30-a6a4-7d557902163e561", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PnfdInfoModifications\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561622055895, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/601?query=/nsd/v1/pnf_descriptors/:pnfdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the user defined data of an individual PNF descriptor resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsd/v1/ns_descriptors/:nsdInfoId", 
            "id": "296e3de0-c633-45c4-86cf-fcd2a9725205562", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsdInfoModifications\": {\n        \"userDefinedData\": [\n            {}\n        ],\n        \"nsdOperationalState\": \"enabled\"\n    }\n}", 
            "time": 1561622055898, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdOnboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdDesigner\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfPkgIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdUsageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PnfdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingFailureDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsdInfoIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsdInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdOperationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdInvariantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfdersion\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/602?query=/nsd/v1/ns_descriptors/:nsdInfoId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PATCH method modifies the operational state and/or user defined data of an individual NS descriptor resource.  This method can be used to: 1) Enable a previously disabled individual NS descriptor resource, allowing again its use for instantiation of new network service with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not change as result. 2) Disable a previously enabled individual NS descriptor resource, preventing any further use for instantiation of new network service(s) with this descriptor. The usage state (i.e. \"IN_USE/NOT_IN_USE\") shall not changes a result. 3) Modify the user defined data of an individual NS descriptor resource.\n"
        }
    ], 
    "id": "8c3bd09c-5189-4b51-b55e-938e7de28c51", 
    "name": "SOL005 - NSD Management Interface"
}