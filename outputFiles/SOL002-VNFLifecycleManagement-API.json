{
    "folders": [
        {
            "description": "Folder for vnf_instances", 
            "collection_name": "SOL002 - VNF Lifecycle Management", 
            "collection": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "id": "c755276b-ce25-422c-a1e4-cda283f6118c", 
            "collection_id": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "order": [
                "959c429f-8f82-42f4-ae31-6ad8fb78fa651", 
                "88a1e384-ac80-4bf0-aad1-18230ae572994", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa657", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729910", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6513", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729916", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6519", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729922", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6525", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729928", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6531", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729934", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6537", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729940", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6543", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729946", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6549", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729952", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6555", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729958", 
                "959c429f-8f82-42f4-ae31-6ad8fb78fa6561", 
                "88a1e384-ac80-4bf0-aad1-18230ae5729964", 
                "419328a7-6ec9-4f2b-a357-4b454902903566", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d67", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e7720369", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d170", 
                "c4a10634-a3e3-47fd-8833-69c69788c85171", 
                "5f900142-5883-412e-91e1-dc22908cd14872", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c73", 
                "fcf13215-c452-43f6-8f22-a76d35175eb774", 
                "5b464470-6b48-4f26-97af-2520a6e37cc578", 
                "419328a7-6ec9-4f2b-a357-4b454902903580", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d81", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e7720383", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d184", 
                "c4a10634-a3e3-47fd-8833-69c69788c85185", 
                "5f900142-5883-412e-91e1-dc22908cd14886", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c87", 
                "fcf13215-c452-43f6-8f22-a76d35175eb788", 
                "5b464470-6b48-4f26-97af-2520a6e37cc592", 
                "419328a7-6ec9-4f2b-a357-4b454902903594", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d95", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e7720397", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d198", 
                "c4a10634-a3e3-47fd-8833-69c69788c85199", 
                "5f900142-5883-412e-91e1-dc22908cd148100", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c101", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7102", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5106", 
                "419328a7-6ec9-4f2b-a357-4b4549029035108", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d109", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203111", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1112", 
                "c4a10634-a3e3-47fd-8833-69c69788c851113", 
                "5f900142-5883-412e-91e1-dc22908cd148114", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c115", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7116", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5120", 
                "419328a7-6ec9-4f2b-a357-4b4549029035122", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d123", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203125", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1126", 
                "c4a10634-a3e3-47fd-8833-69c69788c851127", 
                "5f900142-5883-412e-91e1-dc22908cd148128", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c129", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7130", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5134", 
                "419328a7-6ec9-4f2b-a357-4b4549029035136", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d137", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203139", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1140", 
                "c4a10634-a3e3-47fd-8833-69c69788c851141", 
                "5f900142-5883-412e-91e1-dc22908cd148142", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c143", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7144", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5148", 
                "419328a7-6ec9-4f2b-a357-4b4549029035150", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d151", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203153", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1154", 
                "c4a10634-a3e3-47fd-8833-69c69788c851155", 
                "5f900142-5883-412e-91e1-dc22908cd148156", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c157", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7158", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5162", 
                "419328a7-6ec9-4f2b-a357-4b4549029035164", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d165", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203167", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1168", 
                "c4a10634-a3e3-47fd-8833-69c69788c851169", 
                "5f900142-5883-412e-91e1-dc22908cd148170", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c171", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7172", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5176", 
                "419328a7-6ec9-4f2b-a357-4b4549029035178", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d179", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203181", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1182", 
                "c4a10634-a3e3-47fd-8833-69c69788c851183", 
                "5f900142-5883-412e-91e1-dc22908cd148184", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c185", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7186", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5190", 
                "419328a7-6ec9-4f2b-a357-4b4549029035192", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d193", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203195", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1196", 
                "c4a10634-a3e3-47fd-8833-69c69788c851197", 
                "5f900142-5883-412e-91e1-dc22908cd148198", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c199", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7200", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5204", 
                "419328a7-6ec9-4f2b-a357-4b4549029035206", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d207", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203209", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1210", 
                "c4a10634-a3e3-47fd-8833-69c69788c851211", 
                "5f900142-5883-412e-91e1-dc22908cd148212", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c213", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7214", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5218", 
                "419328a7-6ec9-4f2b-a357-4b4549029035220", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d221", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203223", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1224", 
                "c4a10634-a3e3-47fd-8833-69c69788c851225", 
                "5f900142-5883-412e-91e1-dc22908cd148226", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c227", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7228", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5232", 
                "419328a7-6ec9-4f2b-a357-4b4549029035234", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d235", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203237", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1238", 
                "c4a10634-a3e3-47fd-8833-69c69788c851239", 
                "5f900142-5883-412e-91e1-dc22908cd148240", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c241", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7242", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5246", 
                "419328a7-6ec9-4f2b-a357-4b4549029035248", 
                "0243b54a-2f44-45ca-b547-e4775d7cc08d249", 
                "03b844ba-8ea0-4cf8-bc45-e0bb82e77203251", 
                "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1252", 
                "c4a10634-a3e3-47fd-8833-69c69788c851253", 
                "5f900142-5883-412e-91e1-dc22908cd148254", 
                "c7dece92-9bb0-4f1b-870e-2cd73c99452c255", 
                "fcf13215-c452-43f6-8f22-a76d35175eb7256", 
                "5b464470-6b48-4f26-97af-2520a6e37cc5260", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf262", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf264", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf266", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf268", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf270", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf272", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf274", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf276", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf278", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf280", 
                "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf282", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55284", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55285", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55286", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55287", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55288", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55289", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55290", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55291", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55292", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55293", 
                "05f1cc02-ae04-4958-88aa-85881c0daa55294"
            ], 
            "name": "vnf_instances"
        }, 
        {
            "description": "Folder for vnf_lcm_op_occs", 
            "collection_name": "SOL002 - VNF Lifecycle Management", 
            "collection": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "id": "ad73d513-0896-4c2f-9bb6-409d013bb4c7", 
            "collection_id": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "order": [
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf0", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff1472", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf6", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff1478", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf12", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14714", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf18", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14720", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf24", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14726", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf30", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14732", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf36", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14738", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf42", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14744", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf48", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14750", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf54", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14756", 
                "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf60", 
                "9e27f69b-510f-4ccc-8829-e3e4bfbff14762", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f41168", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f975", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f977", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b79", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f41182", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f989", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f991", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b93", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f41196", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9103", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9105", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b107", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411110", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9117", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9119", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b121", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411124", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9131", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9133", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b135", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411138", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9145", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9147", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b149", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411152", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9159", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9161", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b163", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411166", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9173", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9175", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b177", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411180", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9187", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9189", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b191", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411194", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9201", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9203", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b205", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411208", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9215", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9217", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b219", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411222", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9229", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9231", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b233", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411236", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9243", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9245", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b247", 
                "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411250", 
                "224a4e08-d79b-44fc-bd79-c484b0b418f9257", 
                "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9259", 
                "9835fc33-241c-4f14-99bb-fb21fa859d9b261"
            ], 
            "name": "vnf_lcm_op_occs"
        }, 
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL002 - VNF Lifecycle Management", 
            "collection": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "id": "9e9dc3eb-f62b-4a55-b8ac-464978f99cf8", 
            "collection_id": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "order": [
                "dad32638-af0f-4f87-a3c6-b9ee6113859a3", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce375", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a9", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3711", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a15", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3717", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a21", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3723", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a27", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3729", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a33", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3735", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a39", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3741", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a45", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3747", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a51", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3753", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a57", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3759", 
                "dad32638-af0f-4f87-a3c6-b9ee6113859a63", 
                "d36e38ce-92bd-4868-82fd-ae4cd841ce3765", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef76", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef90", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef104", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef118", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef132", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef146", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef160", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef174", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef188", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef202", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef216", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef230", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef244", 
                "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef258", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0263", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0265", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0267", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0269", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0271", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0273", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0275", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0277", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0279", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0281", 
                "3fa372e3-ab6a-4ccb-b783-749c5aa299d0283"
            ], 
            "name": "subscriptions"
        }
    ], 
    "description": "VNF Configuration interface of ETSI NFV SOL002\n\nIMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to. In case of discrepancies the published ETSI Group Specification takes precedence.\n\nPlease report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis&list_id=61&product=NFV&resolution=---\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf0", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa651", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/2?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff1472", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/3?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a3", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/4?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae572994", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce375", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/6?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf6", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/7?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa657", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/8?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff1478", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a9", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/10?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729910", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/11?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3711", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/12?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf12", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/13?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6513", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14714", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a15", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/16?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729916", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3717", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf18", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6519", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14720", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a21", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729922", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/23?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3723", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf24", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6525", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14726", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptionssnoitpircsbus", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a27", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/vnfconfig/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729928", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3729", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/vnfconfig/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf30", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6531", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14732", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a33", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729934", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3735", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf36", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6537", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14738", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a39", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729940", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3741", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf42", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6543", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14744", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a45", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729946", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3747", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccIds", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf48", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancess", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6549", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/vnfconfig/v1/vnf_instancess',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occss", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14750", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/vnfconfig/v1/vnf_lcm_op_occss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptionss", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a51", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/vnfconfig/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceIds", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729952", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/vnfconfig/v1/vnf_instances/:vnfInstanceIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionIds", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3753", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/vnfconfig/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf54", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6555", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14756", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/57?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a57", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/58?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729958", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3759", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId", 
            "id": "ec6d4513-5423-4a5a-aab0-f3a9dc7ee1cf60", 
            "description": "The client can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an individual \"VNF LCM operation occurrence\" resource.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590650, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "959c429f-8f82-42f4-ae31-6ad8fb78fa6561", 
            "description": "The GET method queries information about multiple VNF instances.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs", 
            "id": "9e27f69b-510f-4ccc-8829-e3e4bfbff14762", 
            "description": "The client can use this method to query status information about multiple VNF lifecycle management operation occurrences.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/vnfconfig/v1/vnf_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "dad32638-af0f-4f87-a3c6-b9ee6113859a63", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "88a1e384-ac80-4bf0-aad1-18230ae5729964", 
            "description": "Information about an individual VNF instance was queried successfully.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "d36e38ce-92bd-4868-82fd-ae4cd841ce3765", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b454902903566", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d67", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f41168", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e7720369", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d170", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c85171", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd14872", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c73", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb774", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f975", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef76", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f977", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc578", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b79", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b454902903580", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d81", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f41182", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e7720383", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d184", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c85185", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd14886", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c87", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb788", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f989", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef90", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f991", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc592", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b93", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b454902903594", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d95", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f41196", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e7720397", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d198", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c85199", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148100", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c101", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7102", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9103", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef104", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9105", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5106", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b107", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035108", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d109", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411110", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203111", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1112", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851113", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148114", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c115", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7116", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9117", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef118", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9119", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5120", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b121", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_416", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035122", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d123", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411124", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203125", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1126", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851127", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148128", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c129", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7130", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9131", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef132", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9133", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5134", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b135", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035136", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d137", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411138", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203139", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1140", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851141", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148142", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c143", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7144", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9145", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef146", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9147", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5148", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b149", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035150", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d151", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411152", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203153", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1154", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851155", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148156", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c157", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7158", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9159", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptionssnoitpircsbus", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef160", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9161", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5162", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b163", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occsscco_po_mcl_fnv/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035164", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d165", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411166", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203167", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1168", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851169", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148170", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c171", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7172", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9173", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef174", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9175", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5176", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b177", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035178", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d179", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411180", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203181", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1182", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851183", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148184", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c185", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7186", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9187", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef188", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9189", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5190", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b191", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035192", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d193", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411194", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203195", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1196", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851197", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148198", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c199", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7200", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9201", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef202", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9203", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5204", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b205", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operates", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035206", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operates',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminates", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d207", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminates',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fails", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411208", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fails',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scales", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203209", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scales',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiates", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1210", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiates',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heals", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851211", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heals',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancess", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148212", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instancess',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vlss", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c213", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vlss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_levels", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7214", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_levels',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retrys", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9215", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retrys',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptionss", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef216", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancels", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9217", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancels',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavours", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5218", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavours',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollbacks", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b219", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollbacks',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035220", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopTypes\": \"forceful\",\n    \"changeStateTos\": \"started\",\n    \"vnfcInstanceIds\": \"vnfcinstanceid\",\n    \"additionalParamss\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d221", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParamss\": {},\n    \"terminationTypes\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411222", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203223", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfStepss\": 0,\n    \"additionalParamss\": {},\n    \"types\": \"scale_out\",\n    \"aspectIds\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1224", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinkss\": [\n        {\n            \"extCpss\": [\n                {\n                    \"cpConfigs\": [\n                        {\n                            \"linkPortIds\": \"linkportid\",\n                            \"cpInstanceIds\": \"cpinstanceid\",\n                            \"cpProtocolDatas\": [\n                                {\n                                    \"layerProtocols\": \"ip_over_ethernet\",\n                                    \"ipOverEthernets\": {\n                                        \"macAddresss\": \"macaddress\",\n                                        \"ipAddressess\": [\n                                            {\n                                                \"fixedAddressess\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetIds\": \"subnetid\",\n                                                \"addressRanges\": {\n                                                    \"maxAddresss\": \"maxaddress\",\n                                                    \"minAddresss\": \"minaddress\"\n                                                },\n                                                \"types\": \"ipv4\",\n                                                \"numDynamicAddressess\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdIds\": \"cpdid\"\n                }\n            ],\n            \"resourceIds\": \"resourceid\",\n            \"vimConnectionIds\": \"vimconnectionid\",\n            \"ids\": \"id\",\n            \"resourceProviderIds\": \"resourceproviderid\",\n            \"extLinkPortss\": [\n                {\n                    \"resourceHandles\": {\n                        \"resourceIds\": \"resourceid\",\n                        \"vimLevelResourceTypes\": \"vimlevelresourcetype\",\n                        \"vimConnectionIds\": \"vimconnectionid\",\n                        \"resourceProviderIds\": \"resourceproviderid\"\n                    },\n                    \"ids\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelIds\": \"instantiationlevelid\",\n    \"additionalParamss\": {},\n    \"localizationLanguages\": \"localizationlanguage\",\n    \"extManagedVirtualLinkss\": [\n        {\n            \"virtualLinkDescIds\": \"virtuallinkdescid\",\n            \"vimConnectionIds\": \"vimconnectionid\",\n            \"ids\": \"id\",\n            \"resourceProviderIds\": \"resourceproviderid\",\n            \"resourceIds\": \"resourceid\"\n        }\n    ],\n    \"flavourIds\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851225", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScripts\": \"healscript\",\n    \"causes\": \"cause\",\n    \"vnfcInstanceIds\": \"vnfcinstanceid\",\n    \"additionalParamss\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148226", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescriptions\": \"vnfinstancedescription\",\n    \"vnfdIds\": \"vnfdid\",\n    \"vnfInstanceNames\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c227", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParamss\": {},\n    \"extVirtualLinkss\": [\n        {\n            \"extCpss\": [\n                {\n                    \"cpConfigs\": [\n                        {\n                            \"linkPortIds\": \"linkportid\",\n                            \"cpInstanceIds\": \"cpinstanceid\",\n                            \"cpProtocolDatas\": [\n                                {\n                                    \"layerProtocols\": \"ip_over_ethernet\",\n                                    \"ipOverEthernets\": {\n                                        \"macAddresss\": \"macaddress\",\n                                        \"ipAddressess\": [\n                                            {\n                                                \"fixedAddressess\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetIds\": \"subnetid\",\n                                                \"addressRanges\": {\n                                                    \"maxAddresss\": \"maxaddress\",\n                                                    \"minAddresss\": \"minaddress\"\n                                                },\n                                                \"types\": \"ipv4\",\n                                                \"numDynamicAddressess\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdIds\": \"cpdid\"\n                }\n            ],\n            \"resourceIds\": \"resourceid\",\n            \"vimConnectionIds\": \"vimconnectionid\",\n            \"ids\": \"id\",\n            \"resourceProviderIds\": \"resourceproviderid\",\n            \"extLinkPortss\": [\n                {\n                    \"resourceHandles\": {\n                        \"resourceIds\": \"resourceid\",\n                        \"vimLevelResourceTypes\": \"vimlevelresourcetype\",\n                        \"vimConnectionIds\": \"vimconnectionid\",\n                        \"resourceProviderIds\": \"resourceproviderid\"\n                    },\n                    \"ids\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7228", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParamss\": {},\n    \"instantiationLevelIds\": \"instantiationlevelid\",\n    \"scaleInfos\": [\n        {\n            \"scaleLevels\": 0,\n            \"aspectIds\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9229", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef230", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filters\": {\n        \"vnfInstanceSubscriptionFilters\": {\n            \"vnfProductsFromProviderss\": [\n                {\n                    \"vnfProviders\": \"vnfprovider\",\n                    \"vnfProductss\": [\n                        {\n                            \"vnfProductNames\": \"vnfproductname\",\n                            \"versionss\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversion\",\n                                    \"vnfdVersionss\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIdss\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIdss\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNamess\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypess\": [\n            \"instantiate\"\n        ],\n        \"notificationTypess\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStatess\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUris\": \"callbackuri\",\n    \"authentications\": {\n        \"authTypes\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentialss\": {\n            \"tokenEndpoints\": \"tokenendpoint\",\n            \"clientPasswords\": \"clientpassword\",\n            \"clientIds\": \"clientid\"\n        },\n        \"paramsBasics\": {\n            \"userNames\": \"username\",\n            \"passwords\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9231", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5232", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParamss\": {},\n    \"extVirtualLinkss\": [\n        {\n            \"extCpss\": [\n                {\n                    \"cpConfigs\": [\n                        {\n                            \"linkPortIds\": \"linkportid\",\n                            \"cpInstanceIds\": \"cpinstanceid\",\n                            \"cpProtocolDatas\": [\n                                {\n                                    \"layerProtocols\": \"ip_over_ethernet\",\n                                    \"ipOverEthernets\": {\n                                        \"macAddresss\": \"macaddress\",\n                                        \"ipAddressess\": [\n                                            {\n                                                \"fixedAddressess\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetIds\": \"subnetid\",\n                                                \"addressRanges\": {\n                                                    \"maxAddresss\": \"maxaddress\",\n                                                    \"minAddresss\": \"minaddress\"\n                                                },\n                                                \"types\": \"ipv4\",\n                                                \"numDynamicAddressess\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdIds\": \"cpdid\"\n                }\n            ],\n            \"resourceIds\": \"resourceid\",\n            \"vimConnectionIds\": \"vimconnectionid\",\n            \"ids\": \"id\",\n            \"resourceProviderIds\": \"resourceproviderid\",\n            \"extLinkPortss\": [\n                {\n                    \"resourceHandles\": {\n                        \"resourceIds\": \"resourceid\",\n                        \"vimLevelResourceTypes\": \"vimlevelresourcetype\",\n                        \"vimConnectionIds\": \"vimconnectionid\",\n                        \"resourceProviderIds\": \"resourceproviderid\"\n                    },\n                    \"ids\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelIds\": \"instantiationlevelid\",\n    \"extManagedVirtualLinkss\": [\n        {\n            \"virtualLinkDescIds\": \"virtuallinkdescid\",\n            \"vimConnectionIds\": \"vimconnectionid\",\n            \"ids\": \"id\",\n            \"resourceProviderIds\": \"resourceproviderid\",\n            \"resourceIds\": \"resourceid\"\n        }\n    ],\n    \"newFlavourIds\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b233", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_422", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035234", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d235", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411236", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203237", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1238", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851239", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148240", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c241", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7242", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9243", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef244", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9245", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5246", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b247", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate", 
            "id": "419328a7-6ec9-4f2b-a357-4b4549029035248", 
            "description": "The POST method changes the operational state of a VNF instance resource.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"stopType\": \"forceful\",\n    \"changeStateTo\": \"started\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/operate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate", 
            "id": "0243b54a-2f44-45ca-b547-e4775d7cc08d249", 
            "description": "The POST method terminates a VNF instance.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"terminationType\": \"forceful\"\n}", 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail", 
            "id": "d3e6ae3e-4e95-4d2f-9487-40ff25e3f411250", 
            "description": "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590649, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale", 
            "id": "03b844ba-8ea0-4cf8-bc45-e0bb82e77203251", 
            "description": "The POST method requests to scale a VNF instance resource incrementally.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"numberOfSteps\": 0,\n    \"additionalParams\": {},\n    \"type\": \"scale_out\",\n    \"aspectId\": \"aspectid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate", 
            "id": "7f5fdb05-6ebd-4477-b3ae-efa77e7b45d1252", 
            "description": "The POST method instantiates a VNF instance.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"additionalParams\": {},\n    \"localizationLanguage\": \"localizationlanguage\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"flavourId\": \"flavourid\"\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal", 
            "id": "c4a10634-a3e3-47fd-8833-69c69788c851253", 
            "description": "The POST method requests to heal a VNF instance resource.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"healScript\": \"healscript\",\n    \"cause\": \"cause\",\n    \"vnfcInstanceId\": \"vnfcinstanceid\",\n    \"additionalParams\": {}\n}", 
            "time": 1561628590650, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "5f900142-5883-412e-91e1-dc22908cd148254", 
            "description": "The POST method creates a new VNF instance resource.", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vnfdId\": \"vnfdid\",\n    \"vnfInstanceName\": \"vnfinstancename\"\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls", 
            "id": "c7dece92-9bb0-4f1b-870e-2cd73c99452c255", 
            "description": "The POST method changes the external connectivity of a VNF instance.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_ext_vls',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level", 
            "id": "fcf13215-c452-43f6-8f22-a76d35175eb7256", 
            "description": "The POST method requests to scale a VNF instance resource to a target level.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"scaleInfo\": [\n        {\n            \"scaleLevel\": 0,\n            \"aspectId\": \"aspectid\"\n        }\n    ]\n}", 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/scale_to_level',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry", 
            "id": "224a4e08-d79b-44fc-bd79-c484b0b418f9257", 
            "description": "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590651, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "df73b9fa-3f6c-4ee6-996c-c08832f0e2ef258", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"operationTypes\": [\n            \"instantiate\"\n        ],\n        \"notificationTypes\": [\n            \"vnflcmoperationoccurrencenotification\"\n        ],\n        \"operationStates\": [\n            \"starting\"\n        ]\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel", 
            "id": "6aa5d3ce-416d-4679-bd3f-60bfd30e45f9259", 
            "description": "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"VNF LCM operation occurrence\" is either in \"PROCESSING\" or \"ROLLING_BACK\" state.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour", 
            "id": "5b464470-6b48-4f26-97af-2520a6e37cc5260", 
            "description": "The POST method changes the deployment flavour of a VNF instance.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"additionalParams\": {},\n    \"extVirtualLinks\": [\n        {\n            \"extCps\": [\n                {\n                    \"cpConfig\": [\n                        {\n                            \"linkPortId\": \"linkportid\",\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"cpProtocolData\": [\n                                {\n                                    \"layerProtocol\": \"ip_over_ethernet\",\n                                    \"ipOverEthernet\": {\n                                        \"macAddress\": \"macaddress\",\n                                        \"ipAddresses\": [\n                                            {\n                                                \"fixedAddresses\": [\n                                                    \"fixedaddresses\"\n                                                ],\n                                                \"subnetId\": \"subnetid\",\n                                                \"addressRange\": {\n                                                    \"maxAddress\": \"maxaddress\",\n                                                    \"minAddress\": \"minaddress\"\n                                                },\n                                                \"type\": \"ipv4\",\n                                                \"numDynamicAddresses\": 0\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"cpdId\": \"cpdid\"\n                }\n            ],\n            \"resourceId\": \"resourceid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"extLinkPorts\": [\n                {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\"\n                }\n            ]\n        }\n    ],\n    \"instantiationLevelId\": \"instantiationlevelid\",\n    \"extManagedVirtualLinks\": [\n        {\n            \"virtualLinkDescId\": \"virtuallinkdescid\",\n            \"vimConnectionId\": \"vimconnectionid\",\n            \"id\": \"id\",\n            \"resourceProviderId\": \"resourceproviderid\",\n            \"resourceId\": \"resourceid\"\n        }\n    ],\n    \"newFlavourId\": \"newflavourid\"\n}", 
            "time": 1561628590653, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId/change_flavour',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback", 
            "id": "9835fc33-241c-4f14-99bb-fb21fa859d9b261", 
            "description": "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590654, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfconfig/v1/vnf_lcm_op_occs/:vnfLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf262", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/263?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0263", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/264?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf264", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/265?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0265", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/266?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf266", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/267?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0267", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/268?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf268", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/269?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0269", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/270?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf270", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/271?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0271", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/272?query=/vnfconfig/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf272", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/273?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0273", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/274?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf274", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/275?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0275", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/276?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf276", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/277?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0277", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/278?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceIds", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf278", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/279?query=/vnfconfig/v1/vnf_instances/:vnfInstanceIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionIds", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0279", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/280?query=/vnfconfig/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf280", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/281?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0281", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/282?query=/vnfconfig/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "0cbd6a5a-e6b6-4fdd-97d7-3d560ab44eaf282", 
            "description": "This method deletes an individual VNF instance resource.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590652, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/283?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/subscriptions/:subscriptionId", 
            "id": "3fa372e3-ab6a-4ccb-b783-749c5aa299d0283", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628590653, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/284?query=/vnfconfig/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55284", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_202", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/285?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55285", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/286?query=/vnfconfig/v1/vnf_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55286", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/287?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55287", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/288?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55288", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_404", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/289?query=/vnfconfig/v1/vnf_instancessecnatsni_fnv/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55289", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/290?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55290", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/291?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55291", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/292?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceIds", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55292", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/293?query=/vnfconfig/v1/vnf_instances/:vnfInstanceIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55293", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/294?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfconfig/v1/vnf_instances/:vnfInstanceId", 
            "id": "05f1cc02-ae04-4958-88aa-85881c0daa55294", 
            "description": "This method modifies an individual VNF instance resource. Changes to the VNF configurable properties are applied to the configuration in the VNF instance, and are reflected in the representation of this resource. Other changes are applied to the VNF instance information managed by the VNFM, and are reflected in the representation of this resource\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"vnfInstanceName\": \"vnfinstancename\",\n    \"vnfProductName\": \"vnfproductname\",\n    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n    \"vimConnectionInfo\": [\n        {\n            \"interfaceInfo\": {},\n            \"vimType\": \"vimtype\",\n            \"accessInfo\": {},\n            \"vimId\": \"vimid\",\n            \"extra\": {},\n            \"id\": \"id\"\n        }\n    ],\n    \"vnfProvider\": \"vnfprovider\",\n    \"vnfdId\": \"vnfdid\",\n    \"extensions\": {},\n    \"vnfdVersion\": \"vnfdversion\",\n    \"vnfConfigurableProperties\": {},\n    \"vnfPkgId\": \"vnfpkgid\",\n    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n    \"metadata\": {}\n}", 
            "time": 1561628590652, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceNames\");", 
                            "    pm.expect(pm.response.text()).to.include(\"monitoringParameters\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"scaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"localizationLanguage\");", 
                            "    pm.expect(pm.response.text()).to.include(\"grantId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"metadata\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfConfigurableProperties\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extCpInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfcResourceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"changedExtConnectivity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardedVnfPkgInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extManagedVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extVirtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiatedVnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"instantiationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"extensions\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualStorageResourceInfo\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/295?query=/vnfconfig/v1/vnf_instances/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }
    ], 
    "id": "79f98b5b-e9e6-47fd-94d5-4ee464d3322b", 
    "name": "SOL002 - VNF Lifecycle Management"
}