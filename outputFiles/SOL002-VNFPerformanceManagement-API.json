{
    "folders": [
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL002 - VNF Performance Management interface", 
            "collection": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "id": "68eb0a87-c015-45bf-bc09-5b10e7ac0f0d", 
            "collection_id": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "order": [
                "87871a77-c37c-47a5-8629-d973074271ff0", 
                "e6c4cf08-53c7-4391-b28f-a15e5185a4bb2", 
                "87871a77-c37c-47a5-8629-d973074271ff7", 
                "e6c4cf08-53c7-4391-b28f-a15e5185a4bb9", 
                "87871a77-c37c-47a5-8629-d973074271ff14", 
                "e6c4cf08-53c7-4391-b28f-a15e5185a4bb16", 
                "87871a77-c37c-47a5-8629-d973074271ff21", 
                "e6c4cf08-53c7-4391-b28f-a15e5185a4bb23", 
                "87871a77-c37c-47a5-8629-d973074271ff28", 
                "e6c4cf08-53c7-4391-b28f-a15e5185a4bb30", 
                "87871a77-c37c-47a5-8629-d973074271ff35", 
                "e6c4cf08-53c7-4391-b28f-a15e5185a4bb37", 
                "87871a77-c37c-47a5-8629-d973074271ff42", 
                "e6c4cf08-53c7-4391-b28f-a15e5185a4bb44", 
                "87871a77-c37c-47a5-8629-d973074271ff49", 
                "e6c4cf08-53c7-4391-b28f-a15e5185a4bb51", 
                "7b662900-33f8-4e98-84f2-f09850d4795b56", 
                "7b662900-33f8-4e98-84f2-f09850d4795b59", 
                "7b662900-33f8-4e98-84f2-f09850d4795b62", 
                "7b662900-33f8-4e98-84f2-f09850d4795b65", 
                "7b662900-33f8-4e98-84f2-f09850d4795b68", 
                "7b662900-33f8-4e98-84f2-f09850d4795b71", 
                "7b662900-33f8-4e98-84f2-f09850d4795b74", 
                "7b662900-33f8-4e98-84f2-f09850d4795b77", 
                "73c45a19-da07-4c43-ab60-c91ce6d3e64181", 
                "73c45a19-da07-4c43-ab60-c91ce6d3e64184", 
                "73c45a19-da07-4c43-ab60-c91ce6d3e64187", 
                "73c45a19-da07-4c43-ab60-c91ce6d3e64190", 
                "73c45a19-da07-4c43-ab60-c91ce6d3e64193", 
                "73c45a19-da07-4c43-ab60-c91ce6d3e64196", 
                "73c45a19-da07-4c43-ab60-c91ce6d3e64199", 
                "73c45a19-da07-4c43-ab60-c91ce6d3e641102"
            ], 
            "name": "subscriptions"
        }, 
        {
            "description": "Folder for pm_jobs", 
            "collection_name": "SOL002 - VNF Performance Management interface", 
            "collection": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "id": "d0b207ef-8e93-4a7a-9ec5-4b75d7ae053e", 
            "collection_id": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "order": [
                "c068a5e6-60a5-4b76-97d3-ba511146fd021", 
                "c01e35ff-191f-4b42-81fb-f2e6607957123", 
                "30da83c7-7463-48ca-b36d-76d5821ca4ca5", 
                "c068a5e6-60a5-4b76-97d3-ba511146fd028", 
                "c01e35ff-191f-4b42-81fb-f2e66079571210", 
                "30da83c7-7463-48ca-b36d-76d5821ca4ca12", 
                "c068a5e6-60a5-4b76-97d3-ba511146fd0215", 
                "c01e35ff-191f-4b42-81fb-f2e66079571217", 
                "30da83c7-7463-48ca-b36d-76d5821ca4ca19", 
                "c068a5e6-60a5-4b76-97d3-ba511146fd0222", 
                "c01e35ff-191f-4b42-81fb-f2e66079571224", 
                "30da83c7-7463-48ca-b36d-76d5821ca4ca26", 
                "c068a5e6-60a5-4b76-97d3-ba511146fd0229", 
                "c01e35ff-191f-4b42-81fb-f2e66079571231", 
                "30da83c7-7463-48ca-b36d-76d5821ca4ca33", 
                "c068a5e6-60a5-4b76-97d3-ba511146fd0236", 
                "c01e35ff-191f-4b42-81fb-f2e66079571238", 
                "30da83c7-7463-48ca-b36d-76d5821ca4ca40", 
                "c068a5e6-60a5-4b76-97d3-ba511146fd0243", 
                "c01e35ff-191f-4b42-81fb-f2e66079571245", 
                "30da83c7-7463-48ca-b36d-76d5821ca4ca47", 
                "c068a5e6-60a5-4b76-97d3-ba511146fd0250", 
                "c01e35ff-191f-4b42-81fb-f2e66079571252", 
                "30da83c7-7463-48ca-b36d-76d5821ca4ca54", 
                "f3bc919b-f684-470e-86a0-6df7b021319457", 
                "f3bc919b-f684-470e-86a0-6df7b021319460", 
                "f3bc919b-f684-470e-86a0-6df7b021319463", 
                "f3bc919b-f684-470e-86a0-6df7b021319466", 
                "f3bc919b-f684-470e-86a0-6df7b021319469", 
                "f3bc919b-f684-470e-86a0-6df7b021319472", 
                "f3bc919b-f684-470e-86a0-6df7b021319475", 
                "f3bc919b-f684-470e-86a0-6df7b021319478", 
                "33245d96-eabb-46d2-8565-0523dc031e9480", 
                "33245d96-eabb-46d2-8565-0523dc031e9483", 
                "33245d96-eabb-46d2-8565-0523dc031e9486", 
                "33245d96-eabb-46d2-8565-0523dc031e9489", 
                "33245d96-eabb-46d2-8565-0523dc031e9492", 
                "33245d96-eabb-46d2-8565-0523dc031e9495", 
                "33245d96-eabb-46d2-8565-0523dc031e9498", 
                "33245d96-eabb-46d2-8565-0523dc031e94101"
            ], 
            "name": "pm_jobs"
        }, 
        {
            "description": "Folder for thresholds", 
            "collection_name": "SOL002 - VNF Performance Management interface", 
            "collection": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "id": "9a067559-0ccf-400d-8a9e-7575c69bc4ae", 
            "collection_id": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "order": [
                "d232d041-672c-496c-abd7-76a46a3fbe784", 
                "21745fdd-d16f-4504-9ea9-26081c753d626", 
                "d232d041-672c-496c-abd7-76a46a3fbe7811", 
                "21745fdd-d16f-4504-9ea9-26081c753d6213", 
                "d232d041-672c-496c-abd7-76a46a3fbe7818", 
                "21745fdd-d16f-4504-9ea9-26081c753d6220", 
                "d232d041-672c-496c-abd7-76a46a3fbe7825", 
                "21745fdd-d16f-4504-9ea9-26081c753d6227", 
                "d232d041-672c-496c-abd7-76a46a3fbe7832", 
                "21745fdd-d16f-4504-9ea9-26081c753d6234", 
                "d232d041-672c-496c-abd7-76a46a3fbe7839", 
                "21745fdd-d16f-4504-9ea9-26081c753d6241", 
                "d232d041-672c-496c-abd7-76a46a3fbe7846", 
                "21745fdd-d16f-4504-9ea9-26081c753d6248", 
                "d232d041-672c-496c-abd7-76a46a3fbe7853", 
                "21745fdd-d16f-4504-9ea9-26081c753d6255", 
                "7b2fc918-533a-45a3-b626-11756f4b7c5158", 
                "7b2fc918-533a-45a3-b626-11756f4b7c5161", 
                "7b2fc918-533a-45a3-b626-11756f4b7c5164", 
                "7b2fc918-533a-45a3-b626-11756f4b7c5167", 
                "7b2fc918-533a-45a3-b626-11756f4b7c5170", 
                "7b2fc918-533a-45a3-b626-11756f4b7c5173", 
                "7b2fc918-533a-45a3-b626-11756f4b7c5176", 
                "7b2fc918-533a-45a3-b626-11756f4b7c5179", 
                "3177156b-2110-4bcc-a475-7d4a9d6081c782", 
                "3177156b-2110-4bcc-a475-7d4a9d6081c785", 
                "3177156b-2110-4bcc-a475-7d4a9d6081c788", 
                "3177156b-2110-4bcc-a475-7d4a9d6081c791", 
                "3177156b-2110-4bcc-a475-7d4a9d6081c794", 
                "3177156b-2110-4bcc-a475-7d4a9d6081c797", 
                "3177156b-2110-4bcc-a475-7d4a9d6081c7100", 
                "3177156b-2110-4bcc-a475-7d4a9d6081c7103"
            ], 
            "name": "thresholds"
        }
    ], 
    "description": "DRAFT - SOL002 - VNF Performance Management interface\nIMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to. In case of discrepancies the published ETSI Group Specification takes precedence.\n\nPlease report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis&list_id=61&product=NFV&resolution=---\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "87871a77-c37c-47a5-8629-d973074271ff0", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817852, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "c068a5e6-60a5-4b76-97d3-ba511146fd021", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/2?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "e6c4cf08-53c7-4391-b28f-a15e5185a4bb2", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/3?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "c01e35ff-191f-4b42-81fb-f2e6607957123", 
            "description": "The client can use this method to retrieve information about PM jobs.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/4?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "d232d041-672c-496c-abd7-76a46a3fbe784", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "30da83c7-7463-48ca-b36d-76d5821ca4ca5", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/6?query=/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "21745fdd-d16f-4504-9ea9-26081c753d626", 
            "description": "The client can use this method for reading an individual threshold.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/7?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "87871a77-c37c-47a5-8629-d973074271ff7", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817852, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/8?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "c068a5e6-60a5-4b76-97d3-ba511146fd028", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "e6c4cf08-53c7-4391-b28f-a15e5185a4bb9", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/10?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "c01e35ff-191f-4b42-81fb-f2e66079571210", 
            "description": "The client can use this method to retrieve information about PM jobs.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/11?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "d232d041-672c-496c-abd7-76a46a3fbe7811", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/12?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "30da83c7-7463-48ca-b36d-76d5821ca4ca12", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/13?query=/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "21745fdd-d16f-4504-9ea9-26081c753d6213", 
            "description": "The client can use this method for reading an individual threshold.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "87871a77-c37c-47a5-8629-d973074271ff14", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817852, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "c068a5e6-60a5-4b76-97d3-ba511146fd0215", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/16?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "e6c4cf08-53c7-4391-b28f-a15e5185a4bb16", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "c01e35ff-191f-4b42-81fb-f2e66079571217", 
            "description": "The client can use this method to retrieve information about PM jobs.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "d232d041-672c-496c-abd7-76a46a3fbe7818", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "30da83c7-7463-48ca-b36d-76d5821ca4ca19", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "21745fdd-d16f-4504-9ea9-26081c753d6220", 
            "description": "The client can use this method for reading an individual threshold.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "87871a77-c37c-47a5-8629-d973074271ff21", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817852, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "c068a5e6-60a5-4b76-97d3-ba511146fd0222", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/23?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "e6c4cf08-53c7-4391-b28f-a15e5185a4bb23", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "c01e35ff-191f-4b42-81fb-f2e66079571224", 
            "description": "The client can use this method to retrieve information about PM jobs.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "d232d041-672c-496c-abd7-76a46a3fbe7825", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "30da83c7-7463-48ca-b36d-76d5821ca4ca26", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "21745fdd-d16f-4504-9ea9-26081c753d6227", 
            "description": "The client can use this method for reading an individual threshold.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "87871a77-c37c-47a5-8629-d973074271ff28", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817852, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "c068a5e6-60a5-4b76-97d3-ba511146fd0229", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "e6c4cf08-53c7-4391-b28f-a15e5185a4bb30", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "c01e35ff-191f-4b42-81fb-f2e66079571231", 
            "description": "The client can use this method to retrieve information about PM jobs.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "d232d041-672c-496c-abd7-76a46a3fbe7832", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "30da83c7-7463-48ca-b36d-76d5821ca4ca33", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "21745fdd-d16f-4504-9ea9-26081c753d6234", 
            "description": "The client can use this method for reading an individual threshold.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptionss", 
            "id": "87871a77-c37c-47a5-8629-d973074271ff35", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817852, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/vnfpm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobIds", 
            "id": "c068a5e6-60a5-4b76-97d3-ba511146fd0236", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/vnfpm/v1/pm_jobs/:pmJobIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionIds", 
            "id": "e6c4cf08-53c7-4391-b28f-a15e5185a4bb37", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/vnfpm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobss", 
            "id": "c01e35ff-191f-4b42-81fb-f2e66079571238", 
            "description": "The client can use this method to retrieve information about PM jobs.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/vnfpm/v1/pm_jobss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholdss", 
            "id": "d232d041-672c-496c-abd7-76a46a3fbe7839", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/vnfpm/v1/thresholdss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportIds", 
            "id": "30da83c7-7463-48ca-b36d-76d5821ca4ca40", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdIds", 
            "id": "21745fdd-d16f-4504-9ea9-26081c753d6241", 
            "description": "The client can use this method for reading an individual threshold.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/vnfpm/v1/thresholds/:thresholdIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "87871a77-c37c-47a5-8629-d973074271ff42", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817852, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "c068a5e6-60a5-4b76-97d3-ba511146fd0243", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "e6c4cf08-53c7-4391-b28f-a15e5185a4bb44", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "c01e35ff-191f-4b42-81fb-f2e66079571245", 
            "description": "The client can use this method to retrieve information about PM jobs.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "d232d041-672c-496c-abd7-76a46a3fbe7846", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "30da83c7-7463-48ca-b36d-76d5821ca4ca47", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "21745fdd-d16f-4504-9ea9-26081c753d6248", 
            "description": "The client can use this method for reading an individual threshold.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "87871a77-c37c-47a5-8629-d973074271ff49", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817852, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "c068a5e6-60a5-4b76-97d3-ba511146fd0250", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "e6c4cf08-53c7-4391-b28f-a15e5185a4bb51", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "c01e35ff-191f-4b42-81fb-f2e66079571252", 
            "description": "The client can use this method to retrieve information about PM jobs.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "d232d041-672c-496c-abd7-76a46a3fbe7853", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "30da83c7-7463-48ca-b36d-76d5821ca4ca54", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/vnfpm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "21745fdd-d16f-4504-9ea9-26081c753d6255", 
            "description": "The client can use this method for reading an individual threshold.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "7b662900-33f8-4e98-84f2-f09850d4795b56", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"notificationTypes\": \"thresholdcrossednotification\"\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628817853, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "f3bc919b-f684-470e-86a0-6df7b021319457", 
            "description": "The POST method creates a PM job.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceIds\": [\n        \"objectinstanceids\"\n    ],\n    \"criteria\": {\n        \"performanceMetricGroup\": [\n            \"performancemetricgroup\"\n        ],\n        \"reportingPeriod\": 0,\n        \"performanceMetric\": [\n            \"performancemetric\"\n        ],\n        \"reportingBoundary\": \"2019-06-27t09:46:57.858z\",\n        \"collectionPeriod\": 0\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "7b2fc918-533a-45a3-b626-11756f4b7c5158", 
            "description": "The POST method can be used by the client to create a threshold.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceId\": \"objectinstanceid\",\n    \"criteria\": {\n        \"simpleThresholdDetails\": {\n            \"thresholdValue\": 0,\n            \"hysteresis\": 0\n        },\n        \"thresholdType\": \"simple\",\n        \"performanceMetric\": \"performancemetric\"\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "7b662900-33f8-4e98-84f2-f09850d4795b59", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"notificationTypes\": \"thresholdcrossednotification\"\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628817853, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "f3bc919b-f684-470e-86a0-6df7b021319460", 
            "description": "The POST method creates a PM job.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceIds\": [\n        \"objectinstanceids\"\n    ],\n    \"criteria\": {\n        \"performanceMetricGroup\": [\n            \"performancemetricgroup\"\n        ],\n        \"reportingPeriod\": 0,\n        \"performanceMetric\": [\n            \"performancemetric\"\n        ],\n        \"reportingBoundary\": \"2019-06-27t09:46:57.858z\",\n        \"collectionPeriod\": 0\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "7b2fc918-533a-45a3-b626-11756f4b7c5161", 
            "description": "The POST method can be used by the client to create a threshold.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceId\": \"objectinstanceid\",\n    \"criteria\": {\n        \"simpleThresholdDetails\": {\n            \"thresholdValue\": 0,\n            \"hysteresis\": 0\n        },\n        \"thresholdType\": \"simple\",\n        \"performanceMetric\": \"performancemetric\"\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "7b662900-33f8-4e98-84f2-f09850d4795b62", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"notificationTypes\": \"thresholdcrossednotification\"\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628817853, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "f3bc919b-f684-470e-86a0-6df7b021319463", 
            "description": "The POST method creates a PM job.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceIds\": [\n        \"objectinstanceids\"\n    ],\n    \"criteria\": {\n        \"performanceMetricGroup\": [\n            \"performancemetricgroup\"\n        ],\n        \"reportingPeriod\": 0,\n        \"performanceMetric\": [\n            \"performancemetric\"\n        ],\n        \"reportingBoundary\": \"2019-06-27t09:46:57.858z\",\n        \"collectionPeriod\": 0\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "7b2fc918-533a-45a3-b626-11756f4b7c5164", 
            "description": "The POST method can be used by the client to create a threshold.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceId\": \"objectinstanceid\",\n    \"criteria\": {\n        \"simpleThresholdDetails\": {\n            \"thresholdValue\": 0,\n            \"hysteresis\": 0\n        },\n        \"thresholdType\": \"simple\",\n        \"performanceMetric\": \"performancemetric\"\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "7b662900-33f8-4e98-84f2-f09850d4795b65", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"notificationTypes\": \"thresholdcrossednotification\"\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628817853, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "f3bc919b-f684-470e-86a0-6df7b021319466", 
            "description": "The POST method creates a PM job.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceIds\": [\n        \"objectinstanceids\"\n    ],\n    \"criteria\": {\n        \"performanceMetricGroup\": [\n            \"performancemetricgroup\"\n        ],\n        \"reportingPeriod\": 0,\n        \"performanceMetric\": [\n            \"performancemetric\"\n        ],\n        \"reportingBoundary\": \"2019-06-27t09:46:57.858z\",\n        \"collectionPeriod\": 0\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "7b2fc918-533a-45a3-b626-11756f4b7c5167", 
            "description": "The POST method can be used by the client to create a threshold.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceId\": \"objectinstanceid\",\n    \"criteria\": {\n        \"simpleThresholdDetails\": {\n            \"thresholdValue\": 0,\n            \"hysteresis\": 0\n        },\n        \"thresholdType\": \"simple\",\n        \"performanceMetric\": \"performancemetric\"\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "7b662900-33f8-4e98-84f2-f09850d4795b68", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"notificationTypes\": \"thresholdcrossednotification\"\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628817853, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "f3bc919b-f684-470e-86a0-6df7b021319469", 
            "description": "The POST method creates a PM job.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceIds\": [\n        \"objectinstanceids\"\n    ],\n    \"criteria\": {\n        \"performanceMetricGroup\": [\n            \"performancemetricgroup\"\n        ],\n        \"reportingPeriod\": 0,\n        \"performanceMetric\": [\n            \"performancemetric\"\n        ],\n        \"reportingBoundary\": \"2019-06-27t09:46:57.858z\",\n        \"collectionPeriod\": 0\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "7b2fc918-533a-45a3-b626-11756f4b7c5170", 
            "description": "The POST method can be used by the client to create a threshold.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceId\": \"objectinstanceid\",\n    \"criteria\": {\n        \"simpleThresholdDetails\": {\n            \"thresholdValue\": 0,\n            \"hysteresis\": 0\n        },\n        \"thresholdType\": \"simple\",\n        \"performanceMetric\": \"performancemetric\"\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptionss", 
            "id": "7b662900-33f8-4e98-84f2-f09850d4795b71", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"notificationTypes\": \"thresholdcrossednotification\"\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628817853, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobss", 
            "id": "f3bc919b-f684-470e-86a0-6df7b021319472", 
            "description": "The POST method creates a PM job.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceIds\": [\n        \"objectinstanceids\"\n    ],\n    \"criteria\": {\n        \"performanceMetricGroup\": [\n            \"performancemetricgroup\"\n        ],\n        \"reportingPeriod\": 0,\n        \"performanceMetric\": [\n            \"performancemetric\"\n        ],\n        \"reportingBoundary\": \"2019-06-27t09:46:57.858z\",\n        \"collectionPeriod\": 0\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/pm_jobss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholdss", 
            "id": "7b2fc918-533a-45a3-b626-11756f4b7c5173", 
            "description": "The POST method can be used by the client to create a threshold.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceId\": \"objectinstanceid\",\n    \"criteria\": {\n        \"simpleThresholdDetails\": {\n            \"thresholdValue\": 0,\n            \"hysteresis\": 0\n        },\n        \"thresholdType\": \"simple\",\n        \"performanceMetric\": \"performancemetric\"\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/thresholdss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "7b662900-33f8-4e98-84f2-f09850d4795b74", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"notificationTypes\": \"thresholdcrossednotification\"\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628817853, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "f3bc919b-f684-470e-86a0-6df7b021319475", 
            "description": "The POST method creates a PM job.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceIds\": [\n        \"objectinstanceids\"\n    ],\n    \"criteria\": {\n        \"performanceMetricGroup\": [\n            \"performancemetricgroup\"\n        ],\n        \"reportingPeriod\": 0,\n        \"performanceMetric\": [\n            \"performancemetric\"\n        ],\n        \"reportingBoundary\": \"2019-06-27t09:46:57.858z\",\n        \"collectionPeriod\": 0\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "7b2fc918-533a-45a3-b626-11756f4b7c5176", 
            "description": "The POST method can be used by the client to create a threshold.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceId\": \"objectinstanceid\",\n    \"criteria\": {\n        \"simpleThresholdDetails\": {\n            \"thresholdValue\": 0,\n            \"hysteresis\": 0\n        },\n        \"thresholdType\": \"simple\",\n        \"performanceMetric\": \"performancemetric\"\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions", 
            "id": "7b662900-33f8-4e98-84f2-f09850d4795b77", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        },\n        \"notificationTypes\": \"thresholdcrossednotification\"\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628817853, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs", 
            "id": "f3bc919b-f684-470e-86a0-6df7b021319478", 
            "description": "The POST method creates a PM job.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceIds\": [\n        \"objectinstanceids\"\n    ],\n    \"criteria\": {\n        \"performanceMetricGroup\": [\n            \"performancemetricgroup\"\n        ],\n        \"reportingPeriod\": 0,\n        \"performanceMetric\": [\n            \"performancemetric\"\n        ],\n        \"reportingBoundary\": \"2019-06-27t09:46:57.858z\",\n        \"collectionPeriod\": 0\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds", 
            "id": "7b2fc918-533a-45a3-b626-11756f4b7c5179", 
            "description": "The POST method can be used by the client to create a threshold.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"objectInstanceId\": \"objectinstanceid\",\n    \"criteria\": {\n        \"simpleThresholdDetails\": {\n            \"thresholdValue\": 0,\n            \"hysteresis\": 0\n        },\n        \"thresholdType\": \"simple\",\n        \"performanceMetric\": \"performancemetric\"\n    }\n}", 
            "time": 1561628817854, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingBoundary\");", 
                            "    pm.expect(pm.response.text()).to.include(\"href\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetric\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"performanceMetricGroup\");", 
                            "    pm.expect(pm.response.text()).to.include(\"collectionPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"readyTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"object\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expiryTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"simpleThresholdDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objects\");", 
                            "    pm.expect(pm.response.text()).to.include(\"thresholdType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"fileSize\");", 
                            "    pm.expect(pm.response.text()).to.include(\"entries\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reportingPeriod\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"notificationTypes\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "33245d96-eabb-46d2-8565-0523dc031e9480", 
            "description": "This method terminates an individual PM job.\n", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/81?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "73c45a19-da07-4c43-ab60-c91ce6d3e64181", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/82?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "3177156b-2110-4bcc-a475-7d4a9d6081c782", 
            "description": "This method allows to delete a threshold.\n", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/83?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "33245d96-eabb-46d2-8565-0523dc031e9483", 
            "description": "This method terminates an individual PM job.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/84?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "73c45a19-da07-4c43-ab60-c91ce6d3e64184", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/85?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "3177156b-2110-4bcc-a475-7d4a9d6081c785", 
            "description": "This method allows to delete a threshold.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/86?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "33245d96-eabb-46d2-8565-0523dc031e9486", 
            "description": "This method terminates an individual PM job.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/87?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "73c45a19-da07-4c43-ab60-c91ce6d3e64187", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/88?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "3177156b-2110-4bcc-a475-7d4a9d6081c788", 
            "description": "This method allows to delete a threshold.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/89?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "33245d96-eabb-46d2-8565-0523dc031e9489", 
            "description": "This method terminates an individual PM job.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/90?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "73c45a19-da07-4c43-ab60-c91ce6d3e64190", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/91?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "3177156b-2110-4bcc-a475-7d4a9d6081c791", 
            "description": "This method allows to delete a threshold.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/92?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "33245d96-eabb-46d2-8565-0523dc031e9492", 
            "description": "This method terminates an individual PM job.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/93?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "73c45a19-da07-4c43-ab60-c91ce6d3e64193", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/94?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "3177156b-2110-4bcc-a475-7d4a9d6081c794", 
            "description": "This method allows to delete a threshold.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/95?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobIds", 
            "id": "33245d96-eabb-46d2-8565-0523dc031e9495", 
            "description": "This method terminates an individual PM job.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/96?query=/vnfpm/v1/pm_jobs/:pmJobIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionIds", 
            "id": "73c45a19-da07-4c43-ab60-c91ce6d3e64196", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/97?query=/vnfpm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdIds", 
            "id": "3177156b-2110-4bcc-a475-7d4a9d6081c797", 
            "description": "This method allows to delete a threshold.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/98?query=/vnfpm/v1/thresholds/:thresholdIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "33245d96-eabb-46d2-8565-0523dc031e9498", 
            "description": "This method terminates an individual PM job.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/99?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "73c45a19-da07-4c43-ab60-c91ce6d3e64199", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/100?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "3177156b-2110-4bcc-a475-7d4a9d6081c7100", 
            "description": "This method allows to delete a threshold.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/101?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/pm_jobs/:pmJobId", 
            "id": "33245d96-eabb-46d2-8565-0523dc031e94101", 
            "description": "This method terminates an individual PM job.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/102?query=/vnfpm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/subscriptions/:subscriptionId", 
            "id": "73c45a19-da07-4c43-ab60-c91ce6d3e641102", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817853, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/103?query=/vnfpm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpm/v1/thresholds/:thresholdId", 
            "id": "3177156b-2110-4bcc-a475-7d4a9d6081c7103", 
            "description": "This method allows to delete a threshold.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628817854, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/104?query=/vnfpm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }
    ], 
    "id": "a4a55bcb-aec7-43e0-a970-2d3913462584", 
    "name": "SOL002 - VNF Performance Management interface"
}