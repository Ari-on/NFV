{
    "folders": [
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL005 - NS Fault Management Interface", 
            "collection": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "id": "6f9a2b8a-05b8-4db3-b52b-607348e3d490", 
            "collection_id": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "order": [
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d", 
                "45755343-4080-4a23-b3c1-7295d10e1c08", 
                "561a649e-7c64-46b3-93a1-a92a7af94185", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf320", 
                "45755343-4080-4a23-b3c1-7295d10e1c082", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3205", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf327", 
                "45755343-4080-4a23-b3c1-7295d10e1c089", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32012", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3214", 
                "45755343-4080-4a23-b3c1-7295d10e1c0816", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32019", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3221", 
                "45755343-4080-4a23-b3c1-7295d10e1c0823", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32026", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3228", 
                "45755343-4080-4a23-b3c1-7295d10e1c0830", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32033", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3235", 
                "45755343-4080-4a23-b3c1-7295d10e1c0837", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32040", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3242", 
                "45755343-4080-4a23-b3c1-7295d10e1c0844", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32047", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3249", 
                "45755343-4080-4a23-b3c1-7295d10e1c0851", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32054", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3256", 
                "45755343-4080-4a23-b3c1-7295d10e1c0858", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32061", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3263", 
                "45755343-4080-4a23-b3c1-7295d10e1c0865", 
                "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32068", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d70", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d74", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d78", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d82", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d86", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d90", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d94", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d98", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d102", 
                "ec2fd13e-e861-4080-af8f-23ad6b53549d106", 
                "561a649e-7c64-46b3-93a1-a92a7af94185110", 
                "561a649e-7c64-46b3-93a1-a92a7af94185111", 
                "561a649e-7c64-46b3-93a1-a92a7af94185112", 
                "561a649e-7c64-46b3-93a1-a92a7af94185113", 
                "561a649e-7c64-46b3-93a1-a92a7af94185114", 
                "561a649e-7c64-46b3-93a1-a92a7af94185115", 
                "561a649e-7c64-46b3-93a1-a92a7af94185116", 
                "561a649e-7c64-46b3-93a1-a92a7af94185117"
            ], 
            "name": "subscriptions"
        }, 
        {
            "description": "Folder for alarms", 
            "collection_name": "SOL005 - NS Fault Management Interface", 
            "collection": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "id": "31d65577-62d3-4e1c-994b-69824a516c44", 
            "collection_id": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "order": [
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d", 
                "b42c2d25-f771-445a-a0c6-c140013fe555", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d1", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca3", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d8", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca10", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d15", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca17", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d22", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca24", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d29", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca31", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d36", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca38", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d43", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca45", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d50", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca52", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d57", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca59", 
                "b1aafe55-b630-457b-ba0a-09822ec3cc8d64", 
                "5f3919cc-086d-4e27-8af3-d48af5f7f8ca66", 
                "b42c2d25-f771-445a-a0c6-c140013fe555118", 
                "b42c2d25-f771-445a-a0c6-c140013fe555119", 
                "b42c2d25-f771-445a-a0c6-c140013fe555120", 
                "b42c2d25-f771-445a-a0c6-c140013fe555121", 
                "b42c2d25-f771-445a-a0c6-c140013fe555122", 
                "b42c2d25-f771-445a-a0c6-c140013fe555123", 
                "b42c2d25-f771-445a-a0c6-c140013fe555124", 
                "b42c2d25-f771-445a-a0c6-c140013fe555125", 
                "b42c2d25-f771-445a-a0c6-c140013fe555126", 
                "b42c2d25-f771-445a-a0c6-c140013fe555127"
            ], 
            "name": "alarms"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "collection_name": "SOL005 - NS Fault Management Interface", 
            "collection": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "id": "698a8440-1e48-4879-920f-1bc1dbe5e28b", 
            "collection_id": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "order": [
                "eba73b84-c7cb-4b32-bd4f-27caf23fde10", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde1071", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde1075", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde1079", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde1083", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde1087", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde1091", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde1095", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde1099", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde10103", 
                "eba73b84-c7cb-4b32-bd4f-27caf23fde10107"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "collection_name": "SOL005 - NS Fault Management Interface", 
            "collection": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "id": "1f30713b-9ada-4ea9-8eab-28de37e4ea8f", 
            "collection_id": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "order": [
                "6da5cab2-f151-4f88-b2a2-866395d246ae", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae72", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae76", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae80", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae84", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae88", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae92", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae96", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae100", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae104", 
                "6da5cab2-f151-4f88-b2a2-866395d246ae108"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "collection_name": "SOL005 - NS Fault Management Interface", 
            "collection": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "id": "a987819c-a8f4-4746-b638-da19548c9934", 
            "collection_id": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "order": [
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b0", 
                "726a9b04-9f15-42df-be6f-d5538453a52b", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b04", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b011", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b018", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b025", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b032", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b039", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b046", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b053", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b060", 
                "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b067", 
                "726a9b04-9f15-42df-be6f-d5538453a52b73", 
                "726a9b04-9f15-42df-be6f-d5538453a52b77", 
                "726a9b04-9f15-42df-be6f-d5538453a52b81", 
                "726a9b04-9f15-42df-be6f-d5538453a52b85", 
                "726a9b04-9f15-42df-be6f-d5538453a52b89", 
                "726a9b04-9f15-42df-be6f-d5538453a52b93", 
                "726a9b04-9f15-42df-be6f-d5538453a52b97", 
                "726a9b04-9f15-42df-be6f-d5538453a52b101", 
                "726a9b04-9f15-42df-be6f-d5538453a52b105", 
                "726a9b04-9f15-42df-be6f-d5538453a52b109"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification"
        }
    ], 
    "description": "SOL005 - NS Fault Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple subscriptions."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Subscribe to alarms related to NSs."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/3?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read individual alarm."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/4?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Acknowledge individual alarm."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c08", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/6?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185", 
            "name": "Terminate a subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/7?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query alarms related to NS instances."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde10", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NS alarms"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NS alarms"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b0", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/10?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Test the notification endpoint"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NS alarms"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf320", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/12?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple subscriptions."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca0", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/13?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query alarms related to NS instances."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf320", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d1", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c082", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/16?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca3", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b04", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3205", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca06", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf327", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d8", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c089", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/23?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca10", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b011", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32012", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca013", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3214", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d15", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c0816", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca17", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b018", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32019", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca020", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3221", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d22", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c0823", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca24", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b025", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32026", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca027", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3228", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d29", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c0830", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca31", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b032", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32033", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca034", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3235", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d36", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c0837", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca38", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b039", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32040", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca041", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filters={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3242", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/nsfm/v1/subscriptions?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmIds", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d43", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/57?query=/nsfm/v1/alarms/:alarmIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionIds", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c0844", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/58?query=/nsfm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filters={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca45", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/nsfm/v1/alarms?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotifications", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b046", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptionss", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32047", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/nsfm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarmss", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca048", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/nsfm/v1/alarmss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3249", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d50", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c0851", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca52", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b053", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/67?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32054", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/68?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca055", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/69?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3256", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/70?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d57", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/71?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c0858", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/72?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca59", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/73?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b060", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/74?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32061", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/75?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca062", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/76?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions?filter={{filter}}", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf3263", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/77?query=/nsfm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b1aafe55-b630-457b-ba0a-09822ec3cc8d64", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/78?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to read an individual alarm.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "id": "45755343-4080-4a23-b3c1-7295d10e1c0865", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/79?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method for reading an individual subscription for alarms related to NSs subscribed by the client. This method shall follow the provisions specified in the Tables 8.4.5.3.2-1 and 8.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms?filter={{filter}}", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca66", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/80?query=/nsfm/v1/alarms?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "3a399f5b-5a6d-4acf-8b57-f83ba5c5b8b067", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/81?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "42d72fe2-aa6b-42aa-8fad-0b8c89a8bf32068", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703703, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/82?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information\nThe client can use this method to retrieve the list of active subscriptions  for alarms related to a NS subscribed by the client.  It can be used e.g. for resynchronization after error situations.\nThis method shall follow the provisions specified in the Tables 8.4.4.3.2-1 and 8.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes. Table 8.4.4.3.2-1: URI query parameters supported.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "5f3919cc-086d-4e27-8af3-d48af5f7f8ca069", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/83?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Alarm List.\nThe client can use this method to retrieve information about the alarm list.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d70", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde1071", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae72", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b73", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d74", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde1075", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae76", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b77", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d78", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde1079", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae80", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b81", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d82", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde1083", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae84", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b85", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d86", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde1087", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae88", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b89", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d90", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde1091", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae92", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b93", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d94", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde1095", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae96", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b97", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptionss", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d98", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotifications", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde1099", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotifications", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae100", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotifications", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b101", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d102", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde10103", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae104", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b105", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions", 
            "id": "ec2fd13e-e861-4080-af8f-23ad6b53549d106", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"FmSubscriptionRequest\": {\n        \"filter\": {\n            \"perceivedSeverities\": [\n                \"critical\"\n            ],\n            \"probableCauses\": [\n                \"probablecauses\"\n            ],\n            \"notificationTypes\": [\n                \"alarmnotification\"\n            ],\n            \"eventTypes\": [\n                \"communications_alarm\"\n            ],\n            \"faultyResourceTypes\": [\n                \"compute\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            }\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622703704, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 8.4.4.3.1-1 and 8.4.4.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification", 
            "id": "eba73b84-c7cb-4b32-bd4f-27caf23fde10107", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"alarm\": {\n            \"alarmClearedTime\": \"2019-06-27t08:05:03.711z\",\n            \"probableCause\": \"probablecause\",\n            \"eventType\": \"communications_alarm\",\n            \"rootCauseFaultyResource\": {\n                \"faultyResourceType\": \"compute\",\n                \"faultyResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimId\": \"vimid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                }\n            },\n            \"isRootCause\": true,\n            \"rootCauseFaultyComponent\": {\n                \"faultyNestedNsInstanceId\": \"faultynestednsinstanceid\",\n                \"faultyResourceType\": \"faultyresourcetype\",\n                \"faultyNsVirtualLinkInstanceId\": \"faultynsvirtuallinkinstanceid\"\n            },\n            \"id\": \"id\",\n            \"eventTime\": \"2019-06-27t08:05:03.711z\",\n            \"alarmRaisedTime\": \"2019-06-27t08:05:03.711z\",\n            \"faultDetails\": \"faultdetails\",\n            \"faultType\": \"faulttype\",\n            \"ackState\": \"unacknowledged\",\n            \"correlatedAlarmIds\": [\n                \"correlatedalarmids\"\n            ],\n            \"managedObjectId\": \"managedobjectid\",\n            \"_links\": {\n                \"self\": {\n                    \"href\": \"href\"\n                }\n            },\n            \"perceivedSeverity\": \"critical\",\n            \"alarmChangedTime\": \"2019-06-27t08:05:03.711z\"\n        },\n        \"notificationType\": \"alarmclearednotification\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification", 
            "id": "6da5cab2-f151-4f88-b2a2-866395d246ae108", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmClearedNotification\": {\n        \"_links\": {\n            \"alarm\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:05:03.711z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"alarmclearednotification\",\n        \"alarmId\": \"alarmid\"\n    }\n}", 
            "time": 1561622703706, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmClearedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification", 
            "id": "726a9b04-9f15-42df-be6f-d5538453a52b109", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmListRebuiltNotification\": {\n        \"timeStamp\": \"2019-06-27t08:05:03.712z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"_links\": {\n            \"alarms\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"notificationType\": \"alarmlistrebuiltnotification\"\n    }\n}", 
            "time": 1561622703707, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nsfm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-AlarmListRebuiltNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method notifies an alarm related to a NS or that the alarm list has been rebuilt.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/124?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185110", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/125?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185111", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/126?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185112", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/127?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185113", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/128?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185114", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/129?query=/nsfm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185115", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/130?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185116", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/131?query=/nsfm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "561a649e-7c64-46b3-93a1-a92a7af94185117", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate Subscription\n  \nThis method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555118", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/132?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555119", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/133?query=/nsfm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555120", 
            "method": "PATCH", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/134?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555121", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/135?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555122", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/136?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555123", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/137?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555124", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/138?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmIds", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555125", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/139?query=/nsfm/v1/alarms/:alarmIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555126", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/140?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "b69f2769-4610-4228-a641-acce6bdd0603", 
            "url": "{{scheme}}://{{host}}:{{port}}/nsfm/v1/alarms/:alarmId", 
            "id": "b42c2d25-f771-445a-a0c6-c140013fe555127", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"AlarmModifications\": {\n        \"ackState\": \"acknowledged\"\n    }\n}", 
            "time": 1561622703705, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Alarm\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyComponent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/141?query=/nsfm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Acknowledge Alarm\nThis method modifies an individual alarm resource.\n"
        }
    ], 
    "id": "b69f2769-4610-4228-a641-acce6bdd0603", 
    "name": "SOL005 - NS Fault Management Interface"
}