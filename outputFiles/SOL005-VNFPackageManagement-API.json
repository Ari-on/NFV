{
    "folders": [
        {
            "description": "Folder for vnf_packages", 
            "collection_name": "SOL005 - VNF Package Management Interface", 
            "collection": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "id": "fe447ef8-9075-4bc5-91fb-097a7cd5b3fd", 
            "collection_id": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "order": [
                "11568220-37b8-46db-8e64-4d177e82378b", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e13", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b79", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff", 
                "841ff399-043c-45f6-8c08-aa8bc4411626", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381", 
                "11568220-37b8-46db-8e64-4d177e82378b0", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e132", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e3", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b796", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd33817", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e311", 
                "11568220-37b8-46db-8e64-4d177e82378b15", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e1317", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e18", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b7921", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd338122", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e326", 
                "11568220-37b8-46db-8e64-4d177e82378b30", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e1332", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e33", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b7936", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd338137", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e341", 
                "11568220-37b8-46db-8e64-4d177e82378b45", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e1347", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e48", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b7951", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd338152", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e356", 
                "11568220-37b8-46db-8e64-4d177e82378b60", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e1362", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e63", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b7966", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd338167", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e371", 
                "11568220-37b8-46db-8e64-4d177e82378b75", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e1377", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e78", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b7981", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd338182", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e386", 
                "11568220-37b8-46db-8e64-4d177e82378b90", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e1392", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e93", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b7996", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd338197", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e3101", 
                "11568220-37b8-46db-8e64-4d177e82378b105", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e13107", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e108", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b79111", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381112", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e3116", 
                "11568220-37b8-46db-8e64-4d177e82378b120", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e13122", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e123", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b79126", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381127", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e3131", 
                "11568220-37b8-46db-8e64-4d177e82378b135", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e13137", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e138", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b79141", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381142", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e3146", 
                "11568220-37b8-46db-8e64-4d177e82378b150", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e13152", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e153", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b79156", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381157", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e3161", 
                "11568220-37b8-46db-8e64-4d177e82378b165", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e13167", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e168", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b79171", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381172", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e3176", 
                "11568220-37b8-46db-8e64-4d177e82378b180", 
                "5d9b4e3c-a556-488b-902d-09c27bee5e13182", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e183", 
                "15746ea8-7e15-4338-9ac0-155aec7b5b79186", 
                "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381187", 
                "c1b6b17d-af05-4c13-9036-881b05d5397e3191", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946196", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8199", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946201", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8204", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946206", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8209", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946211", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8214", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946216", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8219", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946221", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8224", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946226", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8229", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946231", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8234", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946236", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8239", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946241", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8244", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946246", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8249", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946251", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8254", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946256", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8259", 
                "358f8fe6-71cc-4205-8a7d-cad12c958946261", 
                "8567b4c2-7342-46d3-9456-e703f9f5cee8264", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc265", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc266", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc267", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc268", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc269", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc270", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc271", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc272", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc273", 
                "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc274", 
                "841ff399-043c-45f6-8c08-aa8bc4411626276", 
                "841ff399-043c-45f6-8c08-aa8bc4411626278", 
                "841ff399-043c-45f6-8c08-aa8bc4411626280", 
                "841ff399-043c-45f6-8c08-aa8bc4411626282", 
                "841ff399-043c-45f6-8c08-aa8bc4411626284", 
                "841ff399-043c-45f6-8c08-aa8bc4411626286", 
                "841ff399-043c-45f6-8c08-aa8bc4411626288", 
                "841ff399-043c-45f6-8c08-aa8bc4411626290", 
                "841ff399-043c-45f6-8c08-aa8bc4411626292", 
                "841ff399-043c-45f6-8c08-aa8bc4411626294", 
                "841ff399-043c-45f6-8c08-aa8bc4411626296", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff297", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff298", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff299", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff300", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff301", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff302", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff303", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff304", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff305", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff306", 
                "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff307"
            ], 
            "name": "vnf_packages"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "collection_name": "SOL005 - VNF Package Management Interface", 
            "collection": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "id": "cd5a3f4f-f67a-45ab-a0bd-d9d85ca07eb3", 
            "collection_id": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "order": [
                "80532299-507c-464a-941b-edc3e4a36a3b", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40", 
                "80532299-507c-464a-941b-edc3e4a36a3b1", 
                "80532299-507c-464a-941b-edc3e4a36a3b16", 
                "80532299-507c-464a-941b-edc3e4a36a3b31", 
                "80532299-507c-464a-941b-edc3e4a36a3b46", 
                "80532299-507c-464a-941b-edc3e4a36a3b61", 
                "80532299-507c-464a-941b-edc3e4a36a3b76", 
                "80532299-507c-464a-941b-edc3e4a36a3b91", 
                "80532299-507c-464a-941b-edc3e4a36a3b106", 
                "80532299-507c-464a-941b-edc3e4a36a3b121", 
                "80532299-507c-464a-941b-edc3e4a36a3b136", 
                "80532299-507c-464a-941b-edc3e4a36a3b151", 
                "80532299-507c-464a-941b-edc3e4a36a3b166", 
                "80532299-507c-464a-941b-edc3e4a36a3b181", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40195", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40200", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40205", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40210", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40215", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40220", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40225", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40230", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40235", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40240", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40245", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40250", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40255", 
                "6b9999d0-3fb9-47d2-9760-944e33c27b40260"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "collection_name": "SOL005 - VNF Package Management Interface", 
            "collection": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "id": "8613b6ea-803d-49f9-9b5b-96ff4983d623", 
            "collection_id": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "order": [
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a197", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a202", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a207", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a212", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a217", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a222", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a227", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a232", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a237", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a242", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a247", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a252", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a257", 
                "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a262"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification"
        }, 
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL005 - VNF Package Management Interface", 
            "collection": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "id": "c80191a5-d4f4-4eff-882b-4e8c6efb3b5f", 
            "collection_id": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "order": [
                "9a1a0a31-2b94-4999-b43b-9834d2154b27", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702", 
                "95e812dc-5a3b-4099-9b32-f36ad456a865", 
                "99268d76-ba8a-410d-a538-99e69e051782", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b274", 
                "95e812dc-5a3b-4099-9b32-f36ad456a8655", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b2719", 
                "95e812dc-5a3b-4099-9b32-f36ad456a86520", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b2734", 
                "95e812dc-5a3b-4099-9b32-f36ad456a86535", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b2749", 
                "95e812dc-5a3b-4099-9b32-f36ad456a86550", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b2764", 
                "95e812dc-5a3b-4099-9b32-f36ad456a86565", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b2779", 
                "95e812dc-5a3b-4099-9b32-f36ad456a86580", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b2794", 
                "95e812dc-5a3b-4099-9b32-f36ad456a86595", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b27109", 
                "95e812dc-5a3b-4099-9b32-f36ad456a865110", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b27124", 
                "95e812dc-5a3b-4099-9b32-f36ad456a865125", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b27139", 
                "95e812dc-5a3b-4099-9b32-f36ad456a865140", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b27154", 
                "95e812dc-5a3b-4099-9b32-f36ad456a865155", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b27169", 
                "95e812dc-5a3b-4099-9b32-f36ad456a865170", 
                "9a1a0a31-2b94-4999-b43b-9834d2154b27184", 
                "95e812dc-5a3b-4099-9b32-f36ad456a865185", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702198", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702203", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702208", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702213", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702218", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702223", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702228", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702233", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702238", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702243", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702248", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702253", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702258", 
                "0f6618c2-ecf6-441d-b23e-aecd75a51702263", 
                "99268d76-ba8a-410d-a538-99e69e051782275", 
                "99268d76-ba8a-410d-a538-99e69e051782277", 
                "99268d76-ba8a-410d-a538-99e69e051782279", 
                "99268d76-ba8a-410d-a538-99e69e051782281", 
                "99268d76-ba8a-410d-a538-99e69e051782283", 
                "99268d76-ba8a-410d-a538-99e69e051782285", 
                "99268d76-ba8a-410d-a538-99e69e051782287", 
                "99268d76-ba8a-410d-a538-99e69e051782289", 
                "99268d76-ba8a-410d-a538-99e69e051782291", 
                "99268d76-ba8a-410d-a538-99e69e051782293", 
                "99268d76-ba8a-410d-a538-99e69e051782295"
            ], 
            "name": "subscriptions"
        }
    ], 
    "description": "SOL005 - VNF Package Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Fetch individual VNF package artifact."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/2?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Test the notification endpoint"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about VNF package onboarding or change"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e13", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/4?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Fetch an on-boarded VNF package."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Upload a VNF package by providing the content of the VNF package."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/6?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query VNF packages information."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "description": "The POST method creates a new individual VNF package resource.\n", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Create a new individual VNF package resource."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about VNF package onboarding or change"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple subscriptions."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Subscribe to notifications related to on-boarding and/or changes of VNF packages."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a865", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/11?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual subscription resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "description": "The DELETE method terminates an individual subscription.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/12?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782", 
            "name": "Terminate a subscription."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Upload a VNF package by providing the address information of the VNF package."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "description": "The GET method reads the information of a VNF package.\n", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b79", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read information about an individual VNF package."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Update information about an individual VNF package."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/16?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626", 
            "name": "Delete an individual VNF package."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read VNFD of an on-boarded VNF package."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e0", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query VNF packages information."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e1", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query VNF packages information."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e2", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query VNF packages information."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query VNF packages information."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e4", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query VNF packages information."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e5", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/23?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query VNF packages information."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b270", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple subscriptions."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b0", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b1", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e132", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b274", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a8655", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b796", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd33817", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e08", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e19", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e210", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e311", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e412", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e513", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27014", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b15", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b16", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e1317", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e18", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b2719", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a86520", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b7921", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd338122", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e023", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e124", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e225", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e326", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e427", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e528", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27029", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b30", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b31", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e1332", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/57?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e33", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/58?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b2734", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a86535", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b7936", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd338137", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e038", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e139", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e240", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e341", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e442", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/67?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e543", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/68?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_206", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27044", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/69?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b45", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/70?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b46", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/71?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e1347", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/72?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e48", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/73?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b2749", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/74?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a86550", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/75?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b7951", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/76?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd338152", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/77?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e053", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/78?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e154", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/79?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e255", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/80?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e356", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/81?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e457", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/82?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e558", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/83?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27059", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/84?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b60", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/85?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b61", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/86?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e1362", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/87?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e63", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/88?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b2764", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/89?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a86565", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/90?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b7966", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/91?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd338167", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/92?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e068", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/93?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e169", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/94?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e270", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/95?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e371", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/96?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e472", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/97?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e573", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/98?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27074", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/99?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b75", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/100?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b76", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/101?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e1377", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/102?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e78", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/103?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b2779", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/104?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a86580", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/105?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b7981", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/106?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd338182", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/107?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e083", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/108?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e184", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/109?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e285", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/110?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e386", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/111?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e487", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/112?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e588", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/113?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27089", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/114?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b90", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/115?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotificationnoitacifitoNegnahCegakcaPfnV-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b91", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/116?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotificationnoitacifitoNegnahCegakcaPfnV-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e1392", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/117?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e93", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/118?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptionssnoitpircsbus?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b2794", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/119?query=/vnfpkgm/v1/subscriptionssnoitpircsbus?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a86595", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/120?query=/vnfpkgm/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b7996", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/121?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd338197", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/122?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e098", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/123?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e199", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/124?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e2100", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/125?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3101", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/126?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e4102", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/127?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e5103", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/128?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptionssnoitpircsbus", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b270104", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/129?query=/vnfpkgm/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b105", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/130?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b106", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/131?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e13107", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/132?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e108", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/133?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27109", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/134?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a865110", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/135?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b79111", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/136?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381112", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/137?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e0113", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/138?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e1114", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/139?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e2115", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/140?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3116", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/141?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e4117", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/142?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e5118", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/143?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b270119", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/144?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b120", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/145?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b121", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/146?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e13122", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/147?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e123", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/148?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27124", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/149?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a865125", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/150?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b79126", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/151?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381127", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/152?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e0128", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/153?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e1129", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/154?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e2130", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/155?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3131", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/156?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e4132", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/157?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e5133", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/158?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b270134", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/159?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b135", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/160?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b136", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/161?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e13137", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/162?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e138", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/163?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27139", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/164?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a865140", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/165?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b79141", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/166?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381142", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/167?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e0143", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/168?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e1144", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/169?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e2145", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/170?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3146", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/171?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e4147", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/172?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e5148", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/173?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b270149", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/174?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPaths", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b150", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/175?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPaths',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotifications", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b151", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/176?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_contents", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e13152", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/177?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_contents',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filters={{filter}}&all_fieldss={{all_fields}}&fieldss={{fields}}&exclude_fieldss={{exclude_fields}}&exclude_defaults={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e153", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/178?query=/vnfpkgm/v1/vnf_packages?filters={{filter}}?all_fieldss={{all_fields}}?fieldss={{fields}}?exclude_fieldss={{exclude_fields}}?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filters={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27154", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/179?query=/vnfpkgm/v1/subscriptions?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionIds", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a865155", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/180?query=/vnfpkgm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgIds", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b79156", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/181?query=/vnfpkgm/v1/vnf_packages/:vnfPkgIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfds", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381157", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/182?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filters={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e0158", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/183?query=/vnfpkgm/v1/vnf_packages?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fieldss={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e1159", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/184?query=/vnfpkgm/v1/vnf_packages?all_fieldss={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fieldss={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e2160", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/185?query=/vnfpkgm/v1/vnf_packages?fieldss={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fieldss={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3161", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/186?query=/vnfpkgm/v1/vnf_packages?exclude_fieldss={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_defaults={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e4162", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/187?query=/vnfpkgm/v1/vnf_packages?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagess", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e5163", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/188?query=/vnfpkgm/v1/vnf_packagess',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptionss", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b270164", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/189?query=/vnfpkgm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b165", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/190?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b166", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/191?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e13167", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/192?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e168", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/193?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27169", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/194?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a865170", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/195?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b79171", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/196?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381172", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/197?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e0173", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/198?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e1174", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/199?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e2175", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/200?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3176", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/201?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e4177", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/202?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e5178", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/203?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b270179", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/204?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath", 
            "id": "11568220-37b8-46db-8e64-4d177e82378b180", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206932, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/205?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/artifacts/:artifactPath',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of an artifact within a VNF package. This method shall follow the provisions specified in the  Tables 9.4.7.3.2-1 and 9.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "80532299-507c-464a-941b-edc3e4a36a3b181", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206933, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/206?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the Tables 9.4.10.3.2-1 and 9.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "5d9b4e3c-a556-488b-902d-09c27bee5e13182", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nRange: {{Range}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/207?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method fetches the content of a VNF package identified by the VNF package identifier allocated by the NFVO. This method shall follow the provisions specified in the Tables 9.4.5.3.2-1 and 9.4.5.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e183", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/208?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions?filter={{filter}}", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b27184", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/209?query=/vnfpkgm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "id": "95e812dc-5a3b-4099-9b32-f36ad456a865185", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/210?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information The GET method reads an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "15746ea8-7e15-4338-9ac0-155aec7b5b79186", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/211?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the information of a VNF package.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd", 
            "id": "cc623dc7-2edb-4c0b-bc7e-ba7408fd3381187", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/212?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/vnfd',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads the content of the VNFD within a VNF package.\nThe VNFD can be implemented as a single file or as a collection of multiple files. If the VNFD is implemented in the form of multiple files, a ZIP file embedding these files shall be returned. If the VNFD is implemented as a single file, either that file or a ZIP file embedding that file shall be returned. The selection of the format is controlled by the \"Accept\" HTTP header passed in the GET request. • If the \"Accept\" header contains only \"text/plain\" and the VNFD is implemented as a single file, the file shall be returned; otherwise, an error message shall be returned. • If the \"Accept\" header contains only \"application/zip\", the single file or the multiple files that make up the VNFD shall be returned embedded in a ZIP file. • If the \"Accept\" header contains both \"text/plain\" and \"application/zip\", it is up to the NFVO to choose the format to return for a single-file VNFD; for a multi-file VNFD, a ZIP file shall be returned. The default format of the ZIP file shall be the one specified in ETSI GS NFV-SOL 004 [5] where only the YAML files representing the VNFD, and information necessary to navigate the ZIP file and to identify the file that is the entry point for parsing the VNFD (such as TOSCA-meta or manifest files or naming conventions) are included. This method shall follow the provisions specified in the Tables 9.4.4.3.2-1 and 9.4.4.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?filter={{filter}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e0188", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/213?query=/vnfpkgm/v1/vnf_packages?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e1189", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/214?query=/vnfpkgm/v1/vnf_packages?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?fields={{fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e2190", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/215?query=/vnfpkgm/v1/vnf_packages?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e3191", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/216?query=/vnfpkgm/v1/vnf_packages?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e4192", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/217?query=/vnfpkgm/v1/vnf_packages?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "c1b6b17d-af05-4c13-9036-881b05d5397e5193", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/218?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the information of the VNF packages matching the filter. This method shall follow the provisions specified in the  Tables 9.4.2.3.2-1 and 9.4.2.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "9a1a0a31-2b94-4999-b43b-9834d2154b270194", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/219?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations. This method shall follow the provisions specified in the  Tables 9.4.7.8.2-1 and 9.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40195", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946196", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a197", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702198", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8199", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40200", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946201", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a202", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702203", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8204", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40205", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946206", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a207", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702208", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8209", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40210", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946211", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a212", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702213", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8214", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40215", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946216", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a217", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702218", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8219", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40220", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946221", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a222", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702223", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8224", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40225", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946226", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a227", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702228", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8229", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotificationnoitacifitoNegnahCegakcaPfnV-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40230", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotificationnoitacifitoNegnahCegakcaPfnV-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946231", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotificationnoitacifitoNgnidraobnOegakcaPfnV-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a232", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotificationnoitacifitoNgnidraobnOegakcaPfnV-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptionssnoitpircsbus", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702233", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8234", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40235", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946236", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a237", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702238", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8239", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40240", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946241", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a242", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702243", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8244", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40245", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946246", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a247", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702248", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8249", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotifications", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40250", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagess", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946251", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packagess',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotifications", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a252", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptionss", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702253", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uris", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8254", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uris',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40255", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946256", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a257", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702258", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8259", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification", 
            "id": "6b9999d0-3fb9-47d2-9760-944e33c27b40260", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageChangeNotification\": {\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"timeStamp\": \"2019-06-27t08:30:06.939z\",\n        \"changeType\": \"op_state_change\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\",\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"operationalState\": \"enabled\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageChangeNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages", 
            "id": "358f8fe6-71cc-4205-8a7d-cad12c958946261", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateVnfPkgInfoRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new individual VNF package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification", 
            "id": "ede12ae3-e3de-4a06-8613-29b7fd6c0d2a262", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPackageOnboardingNotification\": {\n        \"_links\": {\n            \"vnfPackage\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"id\": \"id\",\n        \"timeStamp\": \"2019-06-27t08:30:06.940z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"vnfPkgId\": \"vnfpkgid\",\n        \"notificationType\": \"notificationtype\",\n        \"vnfdId\": \"vnfdid\"\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-VnfPackageOnboardingNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall follow the provisions specified in the  Tables 9.4.10.3.1-1 and 9.4.10.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions", 
            "id": "0f6618c2-ecf6-441d-b23e-aecd75a51702263", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PkgmSubscriptionRequest\": {\n        \"filter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"usageState\": [\n                        \"in_use\"\n                    ],\n                    \"operationalState\": [\n                        \"enabled\"\n                    ],\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfPkgId\": [\n                        \"vnfpkgid\"\n                    ],\n                    \"vnfdId\": [\n                        \"vnfdid\"\n                    ]\n                }\n            ],\n            \"notificationTypes\": \"vnfpackageonboardingnotification\"\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 9.4.8.3.1-1 and 9.4.8.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri", 
            "id": "8567b4c2-7342-46d3-9456-e703f9f5cee8264", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UploadVnfPkgFromUriRequest\": {\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {
                "vnfPkgId": "{{vnfPkgId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content/upload_from_uri',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"vnfPkgId\",currentData.vnfPkgId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method provides the information for the NFVO to get the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.6.3.1-1 and 9.4.6.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc265", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/290?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc266", 
            "method": "PUT", 
            "headers": "Accept: text/css\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/291?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc267", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/292?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc268", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/293?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc269", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/294?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc270", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/295?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc271", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/296?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_contents", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc272", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/297?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_contents',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc273", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/298?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content", 
            "id": "c3a47d7b-cb62-4d49-8b83-aef3a25b01bc274", 
            "method": "PUT", 
            "headers": "Accept: application/json\nContent-Type: multipart/form-data\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206934, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [
                {
                    "type": "text", 
                    "enabled": true, 
                    "key": "file", 
                    "value": "{{file}}"
                }
            ], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/299?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId/package_content',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The PUT method uploads the content of a VNF package. This method shall follow the provisions specified in the  Tables 9.4.5.3.3-1 and 9.4.5.3.3-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/300?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782275", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/301?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626276", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/302?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782277", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/303?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626278", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/304?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782279", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/305?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626280", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/306?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782281", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/307?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626282", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/308?query=/vnfpkgm/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782283", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/309?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626284", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/310?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782285", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/311?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626286", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/312?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782287", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/313?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626288", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/314?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782289", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/315?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626290", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/316?query=/vnfpkgm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782291", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/317?query=/vnfpkgm/v1/vnf_packages/:vnfPkgIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626292", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/318?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782293", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/319?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626294", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/320?query=/vnfpkgm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "99268d76-ba8a-410d-a538-99e69e051782295", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206935, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/321?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "841ff399-043c-45f6-8c08-aa8bc4411626296", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method deletes an individual VNF Package resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff297", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/322?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff298", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/323?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff299", 
            "method": "PATCH", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/324?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff300", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/325?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff301", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/326?query=/vnfpkgm/v1/vnf_packagessegakcap_fnv/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff302", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/327?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff303", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/328?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff304", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/329?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgIds", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff305", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/330?query=/vnfpkgm/v1/vnf_packages/:vnfPkgIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff306", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/331?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfpkgm/v1/vnf_packages/:vnfPkgId", 
            "id": "9499e497-dbe0-4da0-a0d1-b61ca0d1d3ff307", 
            "method": "PATCH", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"VnfPkgInfoModifications\": {\n        \"operationalState\": \"enabled\",\n        \"userDefinedData\": {}\n    }\n}", 
            "time": 1561624206936, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfSoftwareVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"usageState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationalState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProductName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"softwareImages\");", 
                            "    pm.expect(pm.response.text()).to.include(\"checksum\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfProvider\");", 
                            "    pm.expect(pm.response.text()).to.include(\"userDefinedData\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VnfPkgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PkgmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfdVersion\");", 
                            "    pm.expect(pm.response.text()).to.include(\"onboardingState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalArtifacts\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/332?query=/vnfpkgm/v1/vnf_packages/:vnfPkgId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The PATCH method updates the information of a VNF package.\"\n\"This method shall follow the provisions specified in the  Tables 9.4.3.3.4-1 and 9.4.3.3.4-2 for URI query parameters, request and response data structures, and response codes.\"\n"
        }
    ], 
    "id": "ebd054bf-7b87-425a-bcba-fe953c0a595d", 
    "name": "SOL005 - VNF Package Management Interface"
}